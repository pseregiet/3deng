#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input shd_md5.glsl --output genshd_md5.h --slang glsl330

    Overview:

        Shader program 'shdmd5':
            Get shader desc: shdmd5_shader_desc(sg_query_backend());
            Vertex shader: vs_md5
                Attribute slots:
                    ATTR_vs_md5_apos = 0
                    ATTR_vs_md5_anorm = 1
                    ATTR_vs_md5_auv = 2
                    ATTR_vs_md5_aweight = 3
                Uniform block 'vs_md5':
                    C struct: vs_md5_t
                    Bind slot: SLOT_vs_md5 = 0
                Image 'weightmap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_weightmap = 0
                Image 'bonemap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_bonemap = 1
            Fragment shader: fs_md5


    Shader descriptor structs:

        sg_shader shdmd5 = sg_make_shader(shdmd5_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs_md5':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_md5_apos] = { ... },
                    [ATTR_vs_md5_anorm] = { ... },
                    [ATTR_vs_md5_auv] = { ... },
                    [ATTR_vs_md5_aweight] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_weightmap = 0;
        SLOT_bonemap = 1;

    Bind slot and C-struct for uniform block 'vs_md5':

        vs_md5_t vs_md5 = {
            .mvp = ...;
            .boneuv = ...;
            .weightuv = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_md5, &SG_RANGE(vs_md5));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_md5_apos (0)
#define ATTR_vs_md5_anorm (1)
#define ATTR_vs_md5_auv (2)
#define ATTR_vs_md5_aweight (3)
#define SLOT_weightmap (0)
#define SLOT_bonemap (1)
#define SLOT_vs_md5 (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_md5_t {
    hmm_mat4 mvp;
    int boneuv[4];
    int weightuv[4];
} vs_md5_t;
#pragma pack(pop)
/*
    #version 330
    
    struct vs_md5
    {
        mat4 mvp;
        ivec4 boneuv;
        ivec4 weightuv;
    };
    
    uniform vs_md5 _124;
    
    uniform sampler2D weightmap;
    uniform sampler2D bonemap;
    
    layout(location = 3) in vec2 aweight;
    layout(location = 0) in vec3 apos;
    layout(location = 1) in vec3 anorm;
    out INTERFACE
    {
        vec3 normal;
        vec2 uv;
    } inter;
    
    layout(location = 2) in vec2 auv;
    
    void get_weight_from_texture(sampler2D map, int index, out float bias, out float joint)
    {
        ivec2 pos = ivec2((_124.weightuv.x + index) + _124.weightuv.w, _124.weightuv.y);
        if (_124.weightuv.x >= _124.weightuv.z)
        {
            ivec2 _287 = pos;
            _287.y = pos.y + 1;
            pos = _287;
        }
        vec4 _158 = texelFetch(map, pos, 0);
        bias = _158.x;
        joint = _158.y;
    }
    
    void get_mat4_from_texture(sampler2D map, inout ivec4 pos, int index, out mat4 mat)
    {
        pos.x = 0;
        pos.y = 0;
        mat = mat4(texelFetch(map, ivec2(pos.x + index, pos.y), 0), texelFetch(map, ivec2((pos.x + index) + 1, pos.y), 0), texelFetch(map, ivec2((pos.x + index) + 2, pos.y), 0), texelFetch(map, ivec2((pos.x + index) + 3, pos.y), 0));
    }
    
    void main()
    {
        mat4 bonetransform = mat4(vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0));
        int _173 = int(aweight.x);
        int _177 = int(aweight.y);
        float param_1;
        float param_2;
        mat4 param_5;
        for (int i = 0; i < _177; i++)
        {
            int param = _173 + i;
            get_weight_from_texture(weightmap, param, param_1, param_2);
            ivec4 param_3 = _124.boneuv;
            int param_4 = int(param_2) * 4;
            get_mat4_from_texture(bonemap, param_3, param_4, param_5);
            mat4 _215 = param_5 * param_1;
            bonetransform = mat4(bonetransform[0] + _215[0], bonetransform[1] + _215[1], bonetransform[2] + _215[2], bonetransform[3] + _215[3]);
        }
        inter.uv = auv;
        inter.normal = normalize((_124.mvp * (bonetransform * vec4(anorm, 1.0))).xyz);
        inter.normal = (inter.normal + vec3(1.0)) * 0.5;
        gl_Position = _124.mvp * (bonetransform * vec4(apos, 1.0));
    }
    
*/
static const char vs_md5_source_glsl330[2004] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x76,0x73,0x5f,0x6d,0x64,0x35,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x76,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x76,0x65,0x63,0x34,0x20,0x62,0x6f,0x6e,0x65,0x75,0x76,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x73,
    0x5f,0x6d,0x64,0x35,0x20,0x5f,0x31,0x32,0x34,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x77,0x65,
    0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x62,0x6f,0x6e,0x65,0x6d,
    0x61,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x61,0x77,0x65,0x69,0x67,0x68,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6e,0x6f,0x72,0x6d,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x49,0x4e,0x54,0x45,0x52,0x46,0x41,0x43,0x45,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x7d,0x20,0x69,0x6e,0x74,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x75,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x67,0x65,0x74,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x5f,0x66,0x72,0x6f,
    0x6d,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x6d,0x61,0x70,0x2c,0x20,0x69,0x6e,0x74,0x20,0x69,0x6e,0x64,
    0x65,0x78,0x2c,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x62,0x69,
    0x61,0x73,0x2c,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6a,0x6f,
    0x69,0x6e,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,
    0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x28,0x5f,0x31,
    0x32,0x34,0x2e,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x78,0x20,0x2b,0x20,
    0x69,0x6e,0x64,0x65,0x78,0x29,0x20,0x2b,0x20,0x5f,0x31,0x32,0x34,0x2e,0x77,0x65,
    0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x77,0x2c,0x20,0x5f,0x31,0x32,0x34,0x2e,0x77,
    0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x34,0x2e,0x77,0x65,0x69,0x67,0x68,0x74,0x75,
    0x76,0x2e,0x78,0x20,0x3e,0x3d,0x20,0x5f,0x31,0x32,0x34,0x2e,0x77,0x65,0x69,0x67,
    0x68,0x74,0x75,0x76,0x2e,0x7a,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x38,0x37,
    0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x32,0x38,0x37,0x2e,0x79,0x20,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x79,0x20,0x2b,
    0x20,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,
    0x3d,0x20,0x5f,0x32,0x38,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x38,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x70,0x6f,
    0x73,0x2c,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x61,0x73,0x20,
    0x3d,0x20,0x5f,0x31,0x35,0x38,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6a,0x6f,
    0x69,0x6e,0x74,0x20,0x3d,0x20,0x5f,0x31,0x35,0x38,0x2e,0x79,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x67,0x65,0x74,0x5f,0x6d,0x61,0x74,0x34,0x5f,0x66,
    0x72,0x6f,0x6d,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x6d,0x61,0x70,0x2c,0x20,0x69,0x6e,0x6f,0x75,0x74,
    0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x2c,0x20,0x69,0x6e,0x74,0x20,
    0x69,0x6e,0x64,0x65,0x78,0x2c,0x20,0x6f,0x75,0x74,0x20,0x6d,0x61,0x74,0x34,0x20,
    0x6d,0x61,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x2e,0x78,
    0x20,0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x2e,0x79,0x20,
    0x3d,0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x20,0x3d,0x20,0x6d,
    0x61,0x74,0x34,0x28,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,
    0x61,0x70,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x70,0x6f,0x73,0x2e,0x78,0x20,
    0x2b,0x20,0x69,0x6e,0x64,0x65,0x78,0x2c,0x20,0x70,0x6f,0x73,0x2e,0x79,0x29,0x2c,
    0x20,0x30,0x29,0x2c,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,
    0x6d,0x61,0x70,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x28,0x70,0x6f,0x73,0x2e,
    0x78,0x20,0x2b,0x20,0x69,0x6e,0x64,0x65,0x78,0x29,0x20,0x2b,0x20,0x31,0x2c,0x20,
    0x70,0x6f,0x73,0x2e,0x79,0x29,0x2c,0x20,0x30,0x29,0x2c,0x20,0x74,0x65,0x78,0x65,
    0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x69,0x76,0x65,0x63,
    0x32,0x28,0x28,0x70,0x6f,0x73,0x2e,0x78,0x20,0x2b,0x20,0x69,0x6e,0x64,0x65,0x78,
    0x29,0x20,0x2b,0x20,0x32,0x2c,0x20,0x70,0x6f,0x73,0x2e,0x79,0x29,0x2c,0x20,0x30,
    0x29,0x2c,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,
    0x70,0x2c,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x28,0x70,0x6f,0x73,0x2e,0x78,0x20,
    0x2b,0x20,0x69,0x6e,0x64,0x65,0x78,0x29,0x20,0x2b,0x20,0x33,0x2c,0x20,0x70,0x6f,
    0x73,0x2e,0x79,0x29,0x2c,0x20,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x74,0x34,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,
    0x72,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x65,0x63,0x34,0x28,0x30,
    0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,
    0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x31,0x37,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x77,0x65,0x69,0x67,0x68,
    0x74,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,
    0x37,0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x77,0x65,0x69,0x67,0x68,0x74,
    0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x74,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,
    0x20,0x69,0x20,0x3c,0x20,0x5f,0x31,0x37,0x37,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x31,0x37,0x33,0x20,0x2b,
    0x20,0x69,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x65,0x74,0x5f,
    0x77,0x65,0x69,0x67,0x68,0x74,0x5f,0x66,0x72,0x6f,0x6d,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x77,0x65,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,
    0x20,0x5f,0x31,0x32,0x34,0x2e,0x62,0x6f,0x6e,0x65,0x75,0x76,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x34,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,
    0x20,0x2a,0x20,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x65,
    0x74,0x5f,0x6d,0x61,0x74,0x34,0x5f,0x66,0x72,0x6f,0x6d,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x62,0x6f,0x6e,0x65,0x6d,0x61,0x70,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x31,0x35,0x20,0x3d,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x35,0x20,0x2a,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,
    0x73,0x66,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x62,0x6f,0x6e,
    0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x20,0x2b,0x20,
    0x5f,0x32,0x31,0x35,0x5b,0x30,0x5d,0x2c,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,
    0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x35,
    0x5b,0x31,0x5d,0x2c,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,
    0x72,0x6d,0x5b,0x32,0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x35,0x5b,0x32,0x5d,0x2c,
    0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x33,
    0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x35,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,
    0x20,0x3d,0x20,0x61,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,
    0x72,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x28,0x5f,0x31,0x32,0x34,0x2e,0x6d,0x76,0x70,0x20,0x2a,
    0x20,0x28,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x6e,0x6f,0x72,0x6d,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x65,0x72,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x28,0x69,
    0x6e,0x74,0x65,0x72,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x2b,0x20,0x76,0x65,
    0x63,0x33,0x28,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x5f,0x31,0x32,0x34,0x2e,0x6d,0x76,0x70,0x20,0x2a,0x20,0x28,0x62,0x6f,
    0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x61,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    layout(location = 0) out vec4 frag;
    in INTERFACE
    {
        vec3 normal;
        vec2 uv;
    } inter;
    
    
    void main()
    {
        frag = vec4(inter.normal, 1.0);
    }
    
*/
static const char fs_md5_source_glsl330[160] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x3b,0x0a,0x69,0x6e,0x20,0x49,0x4e,0x54,0x45,0x52,0x46,0x41,0x43,0x45,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x7d,
    0x20,0x69,0x6e,0x74,0x65,0x72,0x3b,0x0a,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x69,0x6e,0x74,0x65,0x72,0x2e,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before genshd_md5.h"
#endif
static inline const sg_shader_desc* shdmd5_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "apos";
      desc.attrs[1].name = "anorm";
      desc.attrs[2].name = "auv";
      desc.attrs[3].name = "aweight";
      desc.vs.source = vs_md5_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 96;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "_124.mvp";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_MAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[1].name = "_124.boneuv";
      desc.vs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_INT4;
      desc.vs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[2].name = "_124.weightuv";
      desc.vs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_INT4;
      desc.vs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.vs.images[0].name = "weightmap";
      desc.vs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.vs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.vs.images[1].name = "bonemap";
      desc.vs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.vs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.source = fs_md5_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "shdmd5_shader";
    }
    return &desc;
  }
  return 0;
}
