#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input shd_md5.glsl --output genshd_md5.h --slang glsl330

    Overview:

        Shader program 'shdmd5':
            Get shader desc: shdmd5_shader_desc(sg_query_backend());
            Vertex shader: vs_md5
                Attribute slots:
                    ATTR_vs_md5_apos = 0
                    ATTR_vs_md5_anorm = 1
                    ATTR_vs_md5_atang = 2
                    ATTR_vs_md5_auv = 3
                    ATTR_vs_md5_aweight = 4
                Uniform block 'vs_md5':
                    C struct: vs_md5_t
                    Bind slot: SLOT_vs_md5 = 0
                Image 'weightmap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_weightmap = 0
                Image 'bonemap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_bonemap = 1
            Fragment shader: fs_md5
                Uniform block 'fs_md5':
                    C struct: fs_md5_t
                    Bind slot: SLOT_fs_md5 = 0
                Image 'imgdiff':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgdiff = 0
                Image 'imgspec':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgspec = 1
                Image 'imgnorm':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgnorm = 2

        Shader program 'shdmd5_depth':
            Get shader desc: shdmd5_depth_shader_desc(sg_query_backend());
            Vertex shader: vs_md5_depth
                Attribute slots:
                    ATTR_vs_md5_depth_apos = 0
                    ATTR_vs_md5_depth_aweight = 1
                Uniform block 'vs_md5_depth':
                    C struct: vs_md5_depth_t
                    Bind slot: SLOT_vs_md5_depth = 0
                Image 'weightmap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_weightmap = 0
                Image 'bonemap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_bonemap = 1
            Fragment shader: fs_md5_depth


    Shader descriptor structs:

        sg_shader shdmd5 = sg_make_shader(shdmd5_shader_desc(sg_query_backend()));
        sg_shader shdmd5_depth = sg_make_shader(shdmd5_depth_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs_md5_depth':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_md5_depth_apos] = { ... },
                    [ATTR_vs_md5_depth_aweight] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'vs_md5':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_md5_apos] = { ... },
                    [ATTR_vs_md5_anorm] = { ... },
                    [ATTR_vs_md5_atang] = { ... },
                    [ATTR_vs_md5_auv] = { ... },
                    [ATTR_vs_md5_aweight] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_weightmap = 0;
        SLOT_bonemap = 1;
        SLOT_imgdiff = 0;
        SLOT_imgspec = 1;
        SLOT_imgnorm = 2;

    Bind slot and C-struct for uniform block 'vs_md5_depth':

        vs_md5_depth_t vs_md5_depth = {
            .umodel = ...;
            .uboneuv = ...;
            .uweightuv = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_md5_depth, &SG_RANGE(vs_md5_depth));

    Bind slot and C-struct for uniform block 'vs_md5':

        vs_md5_t vs_md5 = {
            .uvp = ...;
            .umodel = ...;
            .uboneuv = ...;
            .uweightuv = ...;
            .ulightpos = ...;
            .uviewpos = ...;
            .udummy = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_md5, &SG_RANGE(vs_md5));

    Bind slot and C-struct for uniform block 'fs_md5':

        fs_md5_t fs_md5 = {
            .uambi = ...;
            .udiff = ...;
            .uspec = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_md5, &SG_RANGE(fs_md5));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_md5_depth_apos (0)
#define ATTR_vs_md5_depth_aweight (1)
#define ATTR_vs_md5_apos (0)
#define ATTR_vs_md5_anorm (1)
#define ATTR_vs_md5_atang (2)
#define ATTR_vs_md5_auv (3)
#define ATTR_vs_md5_aweight (4)
#define SLOT_weightmap (0)
#define SLOT_bonemap (1)
#define SLOT_imgdiff (0)
#define SLOT_imgspec (1)
#define SLOT_imgnorm (2)
#define SLOT_vs_md5_depth (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_md5_depth_t {
    hmm_mat4 umodel;
    int uboneuv[4];
    int uweightuv[4];
} vs_md5_depth_t;
#pragma pack(pop)
#define SLOT_vs_md5 (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_md5_t {
    hmm_mat4 uvp;
    hmm_mat4 umodel;
    int uboneuv[4];
    int uweightuv[4];
    hmm_vec3 ulightpos;
    uint8_t _pad_172[4];
    hmm_vec3 uviewpos;
    float udummy;
} vs_md5_t;
#pragma pack(pop)
#define SLOT_fs_md5 (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_md5_t {
    hmm_vec3 uambi;
    uint8_t _pad_12[4];
    hmm_vec3 udiff;
    uint8_t _pad_28[4];
    hmm_vec3 uspec;
    uint8_t _pad_44[4];
} fs_md5_t;
#pragma pack(pop)
/*
    #version 330
    
    struct vs_md5_depth
    {
        mat4 umodel;
        ivec4 uboneuv;
        ivec4 uweightuv;
    };
    
    uniform vs_md5_depth _185;
    
    uniform sampler2D weightmap;
    uniform sampler2D bonemap;
    
    layout(location = 1) in vec2 aweight;
    layout(location = 0) in vec3 apos;
    
    void get_weight_from_texture(sampler2D map, ivec4 weightuv, int index, out float bias, out float joint)
    {
        ivec2 pos = ivec2(weightuv.x + index, weightuv.y);
        if (weightuv.x >= weightuv.z)
        {
            ivec2 _272 = pos;
            _272.y = pos.y + 1;
            ivec2 _275 = _272;
            _275.x = pos.x % weightuv.z;
            pos = _275;
        }
        vec4 _153 = texelFetch(map, pos, 0);
        bias = _153.x;
        joint = _153.y;
    }
    
    void get_mat4_from_texture(sampler2D map, ivec4 boneuv, int index, out mat4 mat)
    {
        int _43 = boneuv.x + index;
        ivec2 pos = ivec2(_43, boneuv.y);
        if (_43 >= boneuv.z)
        {
            ivec2 _257 = pos;
            _257.y = pos.y + 1;
            ivec2 _260 = _257;
            _260.x = pos.x % boneuv.z;
            pos = _260;
        }
        ivec2 _70 = pos;
        ivec2 _263 = _70;
        _263.x = _70.x + 1;
        ivec2 _266 = _263;
        _266.x = _70.x + 2;
        ivec2 _269 = _266;
        _269.x = _70.x + 3;
        pos = _269;
        mat = mat4(texelFetch(map, _70, 0), texelFetch(map, _263, 0), texelFetch(map, _266, 0), texelFetch(map, _269, 0));
    }
    
    void main()
    {
        mat4 bonetransform = mat4(vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0));
        int _168 = int(aweight.x);
        int _172 = int(aweight.y);
        float param_2;
        float param_3;
        mat4 param_6;
        for (int i = 0; i < _172; i++)
        {
            ivec4 param = _185.uweightuv;
            int param_1 = _168 + i;
            get_weight_from_texture(weightmap, param, param_1, param_2, param_3);
            ivec4 param_4 = _185.uboneuv;
            int param_5 = int(param_3) * 4;
            get_mat4_from_texture(bonemap, param_4, param_5, param_6);
            mat4 _217 = param_6 * param_2;
            bonetransform = mat4(bonetransform[0] + _217[0], bonetransform[1] + _217[1], bonetransform[2] + _217[2], bonetransform[3] + _217[3]);
        }
        gl_Position = (_185.umodel * bonetransform) * vec4(apos, 1.0);
    }
    
*/
static const char vs_md5_depth_source_glsl330[2108] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x76,0x73,0x5f,0x6d,0x64,0x35,0x5f,0x64,0x65,0x70,0x74,
    0x68,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x6d,0x6f,
    0x64,0x65,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x75,
    0x62,0x6f,0x6e,0x65,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,
    0x34,0x20,0x75,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x73,0x5f,0x6d,0x64,0x35,0x5f,
    0x64,0x65,0x70,0x74,0x68,0x20,0x5f,0x31,0x38,0x35,0x3b,0x0a,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x77,
    0x65,0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x62,0x6f,0x6e,0x65,
    0x6d,0x61,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x20,0x61,0x77,0x65,0x69,0x67,0x68,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x70,0x6f,0x73,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x67,0x65,0x74,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x5f,
    0x66,0x72,0x6f,0x6d,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6d,0x61,0x70,0x2c,0x20,0x69,0x76,0x65,0x63,
    0x34,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2c,0x20,0x69,0x6e,0x74,0x20,
    0x69,0x6e,0x64,0x65,0x78,0x2c,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x62,0x69,0x61,0x73,0x2c,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6a,0x6f,0x69,0x6e,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,
    0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x69,0x76,0x65,0x63,0x32,0x28,
    0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x78,0x20,0x2b,0x20,0x69,0x6e,0x64,
    0x65,0x78,0x2c,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x79,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x77,0x65,0x69,0x67,0x68,0x74,0x75,
    0x76,0x2e,0x78,0x20,0x3e,0x3d,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,
    0x7a,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,0x32,0x20,0x3d,0x20,0x70,0x6f,
    0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x37,0x32,0x2e,
    0x79,0x20,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x79,0x20,0x2b,0x20,0x31,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x37,
    0x35,0x20,0x3d,0x20,0x5f,0x32,0x37,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x5f,0x32,0x37,0x35,0x2e,0x78,0x20,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x78,
    0x20,0x25,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x32,0x37,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x31,0x35,0x33,0x20,0x3d,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,
    0x74,0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x70,0x6f,0x73,0x2c,0x20,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x61,0x73,0x20,0x3d,0x20,0x5f,0x31,0x35,
    0x33,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6a,0x6f,0x69,0x6e,0x74,0x20,0x3d,
    0x20,0x5f,0x31,0x35,0x33,0x2e,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x67,0x65,0x74,0x5f,0x6d,0x61,0x74,0x34,0x5f,0x66,0x72,0x6f,0x6d,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,
    0x20,0x6d,0x61,0x70,0x2c,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x62,0x6f,0x6e,0x65,
    0x75,0x76,0x2c,0x20,0x69,0x6e,0x74,0x20,0x69,0x6e,0x64,0x65,0x78,0x2c,0x20,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x61,0x74,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x34,0x33,0x20,0x3d,0x20,0x62,0x6f,0x6e,
    0x65,0x75,0x76,0x2e,0x78,0x20,0x2b,0x20,0x69,0x6e,0x64,0x65,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x69,
    0x76,0x65,0x63,0x32,0x28,0x5f,0x34,0x33,0x2c,0x20,0x62,0x6f,0x6e,0x65,0x75,0x76,
    0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x34,0x33,
    0x20,0x3e,0x3d,0x20,0x62,0x6f,0x6e,0x65,0x75,0x76,0x2e,0x7a,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x32,0x35,0x37,0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x35,0x37,0x2e,0x79,0x20,0x3d,0x20,0x70,
    0x6f,0x73,0x2e,0x79,0x20,0x2b,0x20,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x36,0x30,0x20,0x3d,0x20,0x5f,
    0x32,0x35,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x36,
    0x30,0x2e,0x78,0x20,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x78,0x20,0x25,0x20,0x62,0x6f,
    0x6e,0x65,0x75,0x76,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x32,0x36,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x37,0x30,0x20,
    0x3d,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,
    0x20,0x5f,0x32,0x36,0x33,0x20,0x3d,0x20,0x5f,0x37,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x5f,0x32,0x36,0x33,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x37,0x30,0x2e,0x78,0x20,
    0x2b,0x20,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,
    0x32,0x36,0x36,0x20,0x3d,0x20,0x5f,0x32,0x36,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x5f,0x32,0x36,0x36,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x37,0x30,0x2e,0x78,0x20,0x2b,
    0x20,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,
    0x36,0x39,0x20,0x3d,0x20,0x5f,0x32,0x36,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,
    0x32,0x36,0x39,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x37,0x30,0x2e,0x78,0x20,0x2b,0x20,
    0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x32,0x36,
    0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,
    0x2c,0x20,0x5f,0x37,0x30,0x2c,0x20,0x30,0x29,0x2c,0x20,0x74,0x65,0x78,0x65,0x6c,
    0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x5f,0x32,0x36,0x33,0x2c,
    0x20,0x30,0x29,0x2c,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,
    0x6d,0x61,0x70,0x2c,0x20,0x5f,0x32,0x36,0x36,0x2c,0x20,0x30,0x29,0x2c,0x20,0x74,
    0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x5f,
    0x32,0x36,0x39,0x2c,0x20,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x74,0x34,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,
    0x6d,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,
    0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,
    0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,
    0x36,0x38,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x77,0x65,0x69,0x67,0x68,0x74,
    0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x37,
    0x32,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x77,0x65,0x69,0x67,0x68,0x74,0x2e,
    0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x74,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,
    0x69,0x20,0x3c,0x20,0x5f,0x31,0x37,0x32,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x76,0x65,
    0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x31,0x38,0x35,0x2e,
    0x75,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,
    0x20,0x5f,0x31,0x36,0x38,0x20,0x2b,0x20,0x69,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x67,0x65,0x74,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,0x5f,0x66,0x72,
    0x6f,0x6d,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x77,0x65,0x69,0x67,0x68,
    0x74,0x6d,0x61,0x70,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,
    0x20,0x5f,0x31,0x38,0x35,0x2e,0x75,0x62,0x6f,0x6e,0x65,0x75,0x76,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x35,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x29,0x20,0x2a,0x20,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x67,
    0x65,0x74,0x5f,0x6d,0x61,0x74,0x34,0x5f,0x66,0x72,0x6f,0x6d,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x62,0x6f,0x6e,0x65,0x6d,0x61,0x70,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x31,0x37,0x20,0x3d,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x36,0x20,0x2a,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,
    0x6e,0x73,0x66,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x62,0x6f,
    0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x20,0x2b,
    0x20,0x5f,0x32,0x31,0x37,0x5b,0x30,0x5d,0x2c,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,
    0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,
    0x37,0x5b,0x31,0x5d,0x2c,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,
    0x6f,0x72,0x6d,0x5b,0x32,0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x37,0x5b,0x32,0x5d,
    0x2c,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,
    0x33,0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x37,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x5f,0x31,0x38,0x35,0x2e,0x75,0x6d,0x6f,
    0x64,0x65,0x6c,0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,
    0x6f,0x72,0x6d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x70,0x6f,0x73,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    void main()
    {
    }
    
*/
static const char fs_md5_depth_source_glsl330[32] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #version 330
    
    struct vs_md5
    {
        mat4 uvp;
        mat4 umodel;
        ivec4 uboneuv;
        ivec4 uweightuv;
        vec3 ulightpos;
        vec3 uviewpos;
        float udummy;
    };
    
    uniform vs_md5 _186;
    
    uniform sampler2D weightmap;
    uniform sampler2D bonemap;
    
    layout(location = 4) in vec2 aweight;
    layout(location = 2) in vec3 atang;
    layout(location = 1) in vec3 anorm;
    layout(location = 0) in vec3 apos;
    out INTERFACE
    {
        vec3 normal;
        vec3 tang_viewpos;
        vec3 tang_lightpos;
        vec3 tang_fragpos;
        vec2 uv;
    } inter;
    
    layout(location = 3) in vec2 auv;
    
    void get_weight_from_texture(sampler2D map, ivec4 weightuv, int index, out float bias, out float joint)
    {
        ivec2 pos = ivec2(weightuv.x + index, weightuv.y);
        if (weightuv.x >= weightuv.z)
        {
            ivec2 _368 = pos;
            _368.y = pos.y + 1;
            ivec2 _371 = _368;
            _371.x = pos.x % weightuv.z;
            pos = _371;
        }
        vec4 _153 = texelFetch(map, pos, 0);
        bias = _153.x;
        joint = _153.y;
    }
    
    void get_mat4_from_texture(sampler2D map, ivec4 boneuv, int index, out mat4 mat)
    {
        int _43 = boneuv.x + index;
        ivec2 pos = ivec2(_43, boneuv.y);
        if (_43 >= boneuv.z)
        {
            ivec2 _353 = pos;
            _353.y = pos.y + 1;
            ivec2 _356 = _353;
            _356.x = pos.x % boneuv.z;
            pos = _356;
        }
        ivec2 _70 = pos;
        ivec2 _359 = _70;
        _359.x = _70.x + 1;
        ivec2 _362 = _359;
        _362.x = _70.x + 2;
        ivec2 _365 = _362;
        _365.x = _70.x + 3;
        pos = _365;
        mat = mat4(texelFetch(map, _70, 0), texelFetch(map, _359, 0), texelFetch(map, _362, 0), texelFetch(map, _365, 0));
    }
    
    void main()
    {
        mat4 bonetransform = mat4(vec4(0.0), vec4(0.0), vec4(0.0), vec4(0.0));
        int _168 = int(aweight.x);
        int _172 = int(aweight.y);
        float param_2;
        float param_3;
        mat4 param_6;
        for (int i = 0; i < _172; i++)
        {
            ivec4 param = _186.uweightuv;
            int param_1 = _168 + i;
            get_weight_from_texture(weightmap, param, param_1, param_2, param_3);
            ivec4 param_4 = _186.uboneuv;
            int param_5 = int(param_3) * 4;
            get_mat4_from_texture(bonemap, param_4, param_5, param_6);
            mat4 _219 = param_6 * param_2;
            bonetransform = mat4(bonetransform[0] + _219[0], bonetransform[1] + _219[1], bonetransform[2] + _219[2], bonetransform[3] + _219[3]);
        }
        mat4 _241 = _186.umodel * bonetransform;
        mat3 _252 = mat3(_241[0].xyz, _241[1].xyz, _241[2].xyz);
        vec3 _260 = normalize(_252 * atang);
        vec3 _266 = normalize(_252 * anorm);
        vec3 _274 = normalize(_260 - (_266 * dot(_260, _266)));
        vec4 _287 = _241 * vec4(apos, 1.0);
        float _288 = _287.x;
        mat3 _309 = transpose(mat3(_274, cross(_266, _274), _266));
        inter.tang_lightpos = _309 * _186.ulightpos;
        inter.tang_viewpos = _309 * _186.uviewpos;
        inter.tang_fragpos = _309 * vec3(_288, _287.yz);
        gl_Position = _186.uvp * vec4(_288, _287.yz, 1.0);
        inter.uv = auv;
        inter.normal = anorm;
    }
    
*/
static const char vs_md5_source_glsl330[2959] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x76,0x73,0x5f,0x6d,0x64,0x35,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x75,0x76,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x74,0x34,0x20,0x75,0x6d,0x6f,0x64,0x65,0x6c,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x75,0x62,0x6f,0x6e,0x65,0x75,0x76,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x75,0x77,0x65,0x69,0x67,0x68,
    0x74,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x75,0x6c,
    0x69,0x67,0x68,0x74,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x75,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x64,0x75,0x6d,0x6d,0x79,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x73,0x5f,0x6d,0x64,0x35,
    0x20,0x5f,0x31,0x38,0x36,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x77,0x65,0x69,0x67,0x68,0x74,
    0x6d,0x61,0x70,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x62,0x6f,0x6e,0x65,0x6d,0x61,0x70,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x77,
    0x65,0x69,0x67,0x68,0x74,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x61,0x74,0x61,0x6e,0x67,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x70,0x6f,0x73,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x49,0x4e,0x54,0x45,0x52,0x46,0x41,0x43,0x45,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,
    0x5f,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,
    0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x75,0x76,0x3b,0x0a,0x7d,0x20,0x69,0x6e,0x74,0x65,0x72,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x75,0x76,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x67,0x65,0x74,0x5f,0x77,0x65,0x69,0x67,
    0x68,0x74,0x5f,0x66,0x72,0x6f,0x6d,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6d,0x61,0x70,0x2c,0x20,0x69,
    0x76,0x65,0x63,0x34,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2c,0x20,0x69,
    0x6e,0x74,0x20,0x69,0x6e,0x64,0x65,0x78,0x2c,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x62,0x69,0x61,0x73,0x2c,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x6a,0x6f,0x69,0x6e,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x69,0x76,0x65,
    0x63,0x32,0x28,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x78,0x20,0x2b,0x20,
    0x69,0x6e,0x64,0x65,0x78,0x2c,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,
    0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x77,0x65,0x69,0x67,
    0x68,0x74,0x75,0x76,0x2e,0x78,0x20,0x3e,0x3d,0x20,0x77,0x65,0x69,0x67,0x68,0x74,
    0x75,0x76,0x2e,0x7a,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x33,0x36,0x38,0x20,0x3d,
    0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,
    0x36,0x38,0x2e,0x79,0x20,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x79,0x20,0x2b,0x20,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,
    0x5f,0x33,0x37,0x31,0x20,0x3d,0x20,0x5f,0x33,0x36,0x38,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x37,0x31,0x2e,0x78,0x20,0x3d,0x20,0x70,0x6f,
    0x73,0x2e,0x78,0x20,0x25,0x20,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,
    0x5f,0x33,0x37,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x33,0x20,0x3d,0x20,0x74,0x65,0x78,0x65,
    0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x70,0x6f,0x73,0x2c,
    0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x69,0x61,0x73,0x20,0x3d,0x20,
    0x5f,0x31,0x35,0x33,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6a,0x6f,0x69,0x6e,
    0x74,0x20,0x3d,0x20,0x5f,0x31,0x35,0x33,0x2e,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x67,0x65,0x74,0x5f,0x6d,0x61,0x74,0x34,0x5f,0x66,0x72,0x6f,
    0x6d,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x6d,0x61,0x70,0x2c,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x62,
    0x6f,0x6e,0x65,0x75,0x76,0x2c,0x20,0x69,0x6e,0x74,0x20,0x69,0x6e,0x64,0x65,0x78,
    0x2c,0x20,0x6f,0x75,0x74,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x61,0x74,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x34,0x33,0x20,0x3d,0x20,
    0x62,0x6f,0x6e,0x65,0x75,0x76,0x2e,0x78,0x20,0x2b,0x20,0x69,0x6e,0x64,0x65,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x70,0x6f,0x73,0x20,
    0x3d,0x20,0x69,0x76,0x65,0x63,0x32,0x28,0x5f,0x34,0x33,0x2c,0x20,0x62,0x6f,0x6e,
    0x65,0x75,0x76,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x34,0x33,0x20,0x3e,0x3d,0x20,0x62,0x6f,0x6e,0x65,0x75,0x76,0x2e,0x7a,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x76,0x65,0x63,0x32,0x20,0x5f,0x33,0x35,0x33,0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x35,0x33,0x2e,0x79,0x20,
    0x3d,0x20,0x70,0x6f,0x73,0x2e,0x79,0x20,0x2b,0x20,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,0x33,0x35,0x36,0x20,
    0x3d,0x20,0x5f,0x33,0x35,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x33,0x35,0x36,0x2e,0x78,0x20,0x3d,0x20,0x70,0x6f,0x73,0x2e,0x78,0x20,0x25,
    0x20,0x62,0x6f,0x6e,0x65,0x75,0x76,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x33,0x35,0x36,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,0x20,0x5f,
    0x37,0x30,0x20,0x3d,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,
    0x65,0x63,0x32,0x20,0x5f,0x33,0x35,0x39,0x20,0x3d,0x20,0x5f,0x37,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x5f,0x33,0x35,0x39,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x37,0x30,
    0x2e,0x78,0x20,0x2b,0x20,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x33,0x36,0x32,0x20,0x3d,0x20,0x5f,0x33,0x35,0x39,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x5f,0x33,0x36,0x32,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x37,0x30,0x2e,
    0x78,0x20,0x2b,0x20,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x32,
    0x20,0x5f,0x33,0x36,0x35,0x20,0x3d,0x20,0x5f,0x33,0x36,0x32,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x5f,0x33,0x36,0x35,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x37,0x30,0x2e,0x78,
    0x20,0x2b,0x20,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,
    0x5f,0x33,0x36,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x20,0x3d,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,
    0x6d,0x61,0x70,0x2c,0x20,0x5f,0x37,0x30,0x2c,0x20,0x30,0x29,0x2c,0x20,0x74,0x65,
    0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x5f,0x33,
    0x35,0x39,0x2c,0x20,0x30,0x29,0x2c,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,
    0x63,0x68,0x28,0x6d,0x61,0x70,0x2c,0x20,0x5f,0x33,0x36,0x32,0x2c,0x20,0x30,0x29,
    0x2c,0x20,0x74,0x65,0x78,0x65,0x6c,0x46,0x65,0x74,0x63,0x68,0x28,0x6d,0x61,0x70,
    0x2c,0x20,0x5f,0x33,0x36,0x35,0x2c,0x20,0x30,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,
    0x66,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x65,0x63,0x34,
    0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,
    0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x34,0x28,0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,
    0x20,0x5f,0x31,0x36,0x38,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x77,0x65,0x69,
    0x67,0x68,0x74,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,
    0x5f,0x31,0x37,0x32,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x77,0x65,0x69,0x67,
    0x68,0x74,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x74,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,
    0x30,0x3b,0x20,0x69,0x20,0x3c,0x20,0x5f,0x31,0x37,0x32,0x3b,0x20,0x69,0x2b,0x2b,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x31,
    0x38,0x36,0x2e,0x75,0x77,0x65,0x69,0x67,0x68,0x74,0x75,0x76,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x20,0x3d,0x20,0x5f,0x31,0x36,0x38,0x20,0x2b,0x20,0x69,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x67,0x65,0x74,0x5f,0x77,0x65,0x69,0x67,0x68,0x74,
    0x5f,0x66,0x72,0x6f,0x6d,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x77,0x65,
    0x69,0x67,0x68,0x74,0x6d,0x61,0x70,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x34,0x20,0x3d,0x20,0x5f,0x31,0x38,0x36,0x2e,0x75,0x62,0x6f,0x6e,0x65,0x75,0x76,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x29,0x20,0x2a,0x20,0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x67,0x65,0x74,0x5f,0x6d,0x61,0x74,0x34,0x5f,0x66,0x72,0x6f,0x6d,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x62,0x6f,0x6e,0x65,0x6d,0x61,0x70,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x31,0x39,0x20,0x3d,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x20,0x2a,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6e,0x65,
    0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,
    0x28,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x30,
    0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x39,0x5b,0x30,0x5d,0x2c,0x20,0x62,0x6f,0x6e,
    0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x20,0x2b,0x20,
    0x5f,0x32,0x31,0x39,0x5b,0x31,0x5d,0x2c,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,
    0x6e,0x73,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x39,
    0x5b,0x32,0x5d,0x2c,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,0x6f,
    0x72,0x6d,0x5b,0x33,0x5d,0x20,0x2b,0x20,0x5f,0x32,0x31,0x39,0x5b,0x33,0x5d,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,
    0x20,0x5f,0x32,0x34,0x31,0x20,0x3d,0x20,0x5f,0x31,0x38,0x36,0x2e,0x75,0x6d,0x6f,
    0x64,0x65,0x6c,0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x74,0x72,0x61,0x6e,0x73,0x66,
    0x6f,0x72,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x33,0x20,0x5f,0x32,
    0x35,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x33,0x28,0x5f,0x32,0x34,0x31,0x5b,0x30,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x32,0x34,0x31,0x5b,0x31,0x5d,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x5f,0x32,0x34,0x31,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x36,0x30,0x20,
    0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x32,0x35,0x32,
    0x20,0x2a,0x20,0x61,0x74,0x61,0x6e,0x67,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x32,0x36,0x36,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x5f,0x32,0x35,0x32,0x20,0x2a,0x20,0x61,0x6e,0x6f,0x72,
    0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x37,
    0x34,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x32,
    0x36,0x30,0x20,0x2d,0x20,0x28,0x5f,0x32,0x36,0x36,0x20,0x2a,0x20,0x64,0x6f,0x74,
    0x28,0x5f,0x32,0x36,0x30,0x2c,0x20,0x5f,0x32,0x36,0x36,0x29,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x38,0x37,0x20,0x3d,0x20,
    0x5f,0x32,0x34,0x31,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x70,0x6f,0x73,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x32,0x38,0x38,0x20,0x3d,0x20,0x5f,0x32,0x38,0x37,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x33,0x20,0x5f,0x33,0x30,0x39,0x20,0x3d,
    0x20,0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x6d,0x61,0x74,0x33,0x28,
    0x5f,0x32,0x37,0x34,0x2c,0x20,0x63,0x72,0x6f,0x73,0x73,0x28,0x5f,0x32,0x36,0x36,
    0x2c,0x20,0x5f,0x32,0x37,0x34,0x29,0x2c,0x20,0x5f,0x32,0x36,0x36,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x33,0x30,0x39,0x20,
    0x2a,0x20,0x5f,0x31,0x38,0x36,0x2e,0x75,0x6c,0x69,0x67,0x68,0x74,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,
    0x5f,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x33,0x30,0x39,0x20,
    0x2a,0x20,0x5f,0x31,0x38,0x36,0x2e,0x75,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,
    0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x33,0x30,0x39,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x32,0x38,0x38,0x2c,0x20,0x5f,0x32,0x38,0x37,
    0x2e,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x31,0x38,0x36,0x2e,0x75,0x76,0x70,
    0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x38,0x38,0x2c,0x20,0x5f,0x32,
    0x38,0x37,0x2e,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x20,0x3d,0x20,0x61,0x75,0x76,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x20,0x3d,0x20,0x61,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_md5[3];
    uniform sampler2D imgdiff;
    uniform sampler2D imgspec;
    uniform sampler2D imgnorm;
    
    in INTERFACE
    {
        vec3 normal;
        vec3 tang_viewpos;
        vec3 tang_lightpos;
        vec3 tang_fragpos;
        vec2 uv;
    } inter;
    
    layout(location = 0) out vec4 frag;
    
    void main()
    {
        vec3 _28 = texture(imgdiff, inter.uv).xyz;
        vec3 _49 = normalize((texture(imgnorm, inter.uv).xyz * 2.0) - vec3(1.0));
        vec3 _66 = normalize(-inter.tang_lightpos);
        frag = vec4(((fs_md5[0].xyz * _28) + ((fs_md5[1].xyz * max(dot(_49, _66), 0.0)) + ((texture(imgspec, inter.uv).xyz * pow(max(dot(_49, reflect(-_66, _49)), 0.0), 32.0)) * fs_md5[2].xyz))) * _28, 1.0);
    }
    
*/
static const char fs_md5_source_glsl330[677] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x6d,0x64,
    0x35,0x5b,0x33,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x6d,0x67,0x64,0x69,0x66,0x66,0x3b,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x32,0x44,0x20,0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x6d,
    0x67,0x6e,0x6f,0x72,0x6d,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x49,0x4e,0x54,0x45,0x52,
    0x46,0x41,0x43,0x45,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x74,0x61,0x6e,0x67,0x5f,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x74,0x61,0x6e,0x67,0x5f,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x7d,0x20,0x69,0x6e,0x74,
    0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x32,0x38,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,
    0x6d,0x67,0x64,0x69,0x66,0x66,0x2c,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,
    0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x34,0x39,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x6e,0x6f,0x72,0x6d,
    0x2c,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,
    0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x36,
    0x36,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,0x69,
    0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x70,
    0x6f,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x66,0x73,0x5f,0x6d,0x64,0x35,0x5b,0x30,0x5d,
    0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x5f,0x32,0x38,0x29,0x20,0x2b,0x20,0x28,0x28,
    0x66,0x73,0x5f,0x6d,0x64,0x35,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,
    0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x34,0x39,0x2c,0x20,0x5f,0x36,0x36,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x2c,0x20,0x69,0x6e,
    0x74,0x65,0x72,0x2e,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x70,0x6f,
    0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x5f,0x34,0x39,0x2c,0x20,0x72,
    0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x5f,0x36,0x36,0x2c,0x20,0x5f,0x34,0x39,
    0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x33,0x32,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x66,0x73,0x5f,0x6d,0x64,0x35,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x29,0x29,0x20,0x2a,0x20,0x5f,0x32,0x38,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before genshd_md5.h"
#endif
static inline const sg_shader_desc* shdmd5_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "apos";
      desc.attrs[1].name = "anorm";
      desc.attrs[2].name = "atang";
      desc.attrs[3].name = "auv";
      desc.attrs[4].name = "aweight";
      desc.vs.source = vs_md5_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "_186.uvp";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_MAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[1].name = "_186.umodel";
      desc.vs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_MAT4;
      desc.vs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[2].name = "_186.uboneuv";
      desc.vs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_INT4;
      desc.vs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[3].name = "_186.uweightuv";
      desc.vs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_INT4;
      desc.vs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[4].name = "_186.ulightpos";
      desc.vs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_FLOAT3;
      desc.vs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[5].name = "_186.uviewpos";
      desc.vs.uniform_blocks[0].uniforms[5].type = SG_UNIFORMTYPE_FLOAT3;
      desc.vs.uniform_blocks[0].uniforms[5].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[6].name = "_186.udummy";
      desc.vs.uniform_blocks[0].uniforms[6].type = SG_UNIFORMTYPE_FLOAT;
      desc.vs.uniform_blocks[0].uniforms[6].array_count = 1;
      desc.vs.images[0].name = "weightmap";
      desc.vs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.vs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.vs.images[1].name = "bonemap";
      desc.vs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.vs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.source = fs_md5_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 48;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_md5";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 3;
      desc.fs.images[0].name = "imgdiff";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "imgspec";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[2].name = "imgnorm";
      desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[2].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "shdmd5_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* shdmd5_depth_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "apos";
      desc.attrs[1].name = "aweight";
      desc.vs.source = vs_md5_depth_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 96;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "_185.umodel";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_MAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[1].name = "_185.uboneuv";
      desc.vs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_INT4;
      desc.vs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.vs.uniform_blocks[0].uniforms[2].name = "_185.uweightuv";
      desc.vs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_INT4;
      desc.vs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.vs.images[0].name = "weightmap";
      desc.vs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.vs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.vs.images[1].name = "bonemap";
      desc.vs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.vs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.source = fs_md5_depth_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "shdmd5_depth_shader";
    }
    return &desc;
  }
  return 0;
}
