#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input shaders/shd_combo.glsl --output genshd_combo.h --slang glsl330

    Overview:

        Shader program 'light_cube':
            Get shader desc: light_cube_shader_desc(sg_query_backend());
            Vertex shader: light_cube_vs
                Attribute slots:
                    ATTR_light_cube_vs_pos = 0
                Uniform block 'vs_paramsl':
                    C struct: vs_paramsl_t
                    Bind slot: SLOT_vs_paramsl = 0
            Fragment shader: light_cube_fs

        Shader program 'shdobj':
            Get shader desc: shdobj_shader_desc(sg_query_backend());
            Vertex shader: vs_obj
                Attribute slots:
                    ATTR_vs_obj_apos = 0
                    ATTR_vs_obj_anorm = 1
                    ATTR_vs_obj_auv = 2
                    ATTR_vs_obj_atang = 3
                Uniform block 'vs_obj_fast':
                    C struct: vs_obj_fast_t
                    Bind slot: SLOT_vs_obj_fast = 0
                Uniform block 'vs_obj_slow':
                    C struct: vs_obj_slow_t
                    Bind slot: SLOT_vs_obj_slow = 1
            Fragment shader: fs_obj
                Uniform block 'fs_obj_dirlight':
                    C struct: fs_obj_dirlight_t
                    Bind slot: SLOT_fs_obj_dirlight = 0
                Uniform block 'fs_obj_pointlights':
                    C struct: fs_obj_pointlights_t
                    Bind slot: SLOT_fs_obj_pointlights = 1
                Uniform block 'fs_obj_spotlight':
                    C struct: fs_obj_spotlight_t
                    Bind slot: SLOT_fs_obj_spotlight = 2
                Uniform block 'fs_obj_fast':
                    C struct: fs_obj_fast_t
                    Bind slot: SLOT_fs_obj_fast = 3
                Image 'imgdiff':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgdiff = 0
                Image 'imgspec':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgspec = 1
                Image 'imgnorm':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgnorm = 2


    Shader descriptor structs:

        sg_shader light_cube = sg_make_shader(light_cube_shader_desc(sg_query_backend()));
        sg_shader shdobj = sg_make_shader(shdobj_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs_obj':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_obj_apos] = { ... },
                    [ATTR_vs_obj_anorm] = { ... },
                    [ATTR_vs_obj_auv] = { ... },
                    [ATTR_vs_obj_atang] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'light_cube_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_light_cube_vs_pos] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_imgdiff = 0;
        SLOT_imgspec = 1;
        SLOT_imgnorm = 2;

    Bind slot and C-struct for uniform block 'vs_obj_fast':

        vs_obj_fast_t vs_obj_fast = {
            .umodel = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_obj_fast, &SG_RANGE(vs_obj_fast));

    Bind slot and C-struct for uniform block 'vs_obj_slow':

        vs_obj_slow_t vs_obj_slow = {
            .uvp = ...;
            .upntlight_pos = ...;
            .uviewpos = ...;
            .udirlight_dir = ...;
            .usptlight_dir = ...;
            .usptlight_pos = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_obj_slow, &SG_RANGE(vs_obj_slow));

    Bind slot and C-struct for uniform block 'fs_obj_dirlight':

        fs_obj_dirlight_t fs_obj_dirlight = {
            .ambi = ...;
            .diff = ...;
            .spec = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_obj_dirlight, &SG_RANGE(fs_obj_dirlight));

    Bind slot and C-struct for uniform block 'fs_obj_pointlights':

        fs_obj_pointlights_t fs_obj_pointlights = {
            .ambi = ...;
            .diff = ...;
            .spec = ...;
            .atte = ...;
            .enabled = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_obj_pointlights, &SG_RANGE(fs_obj_pointlights));

    Bind slot and C-struct for uniform block 'fs_obj_spotlight':

        fs_obj_spotlight_t fs_obj_spotlight = {
            .atte = ...;
            .cutoff = ...;
            .ambi = ...;
            .outcutoff = ...;
            .diff = ...;
            .spec = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_obj_spotlight, &SG_RANGE(fs_obj_spotlight));

    Bind slot and C-struct for uniform block 'fs_obj_fast':

        fs_obj_fast_t fs_obj_fast = {
            .umatshine = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_obj_fast, &SG_RANGE(fs_obj_fast));

    Bind slot and C-struct for uniform block 'vs_paramsl':

        vs_paramsl_t vs_paramsl = {
            .mvp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_paramsl, &SG_RANGE(vs_paramsl));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_obj_apos (0)
#define ATTR_vs_obj_anorm (1)
#define ATTR_vs_obj_auv (2)
#define ATTR_vs_obj_atang (3)
#define ATTR_light_cube_vs_pos (0)
#define SLOT_imgdiff (0)
#define SLOT_imgspec (1)
#define SLOT_imgnorm (2)
#define SLOT_vs_obj_fast (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_obj_fast_t {
    hmm_mat4 umodel;
} vs_obj_fast_t;
#pragma pack(pop)
#define SLOT_vs_obj_slow (1)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_obj_slow_t {
    hmm_mat4 uvp;
    hmm_vec4 upntlight_pos[4];
    hmm_vec3 uviewpos;
    uint8_t _pad_140[4];
    hmm_vec3 udirlight_dir;
    uint8_t _pad_156[4];
    hmm_vec3 usptlight_dir;
    uint8_t _pad_172[4];
    hmm_vec3 usptlight_pos;
    uint8_t _pad_188[4];
} vs_obj_slow_t;
#pragma pack(pop)
#define SLOT_fs_obj_dirlight (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_obj_dirlight_t {
    hmm_vec3 ambi;
    uint8_t _pad_12[4];
    hmm_vec3 diff;
    uint8_t _pad_28[4];
    hmm_vec3 spec;
    uint8_t _pad_44[4];
} fs_obj_dirlight_t;
#pragma pack(pop)
#define SLOT_fs_obj_pointlights (1)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_obj_pointlights_t {
    hmm_vec4 ambi[4];
    hmm_vec4 diff[4];
    hmm_vec4 spec[4];
    hmm_vec4 atte[4];
    float enabled;
    uint8_t _pad_260[12];
} fs_obj_pointlights_t;
#pragma pack(pop)
#define SLOT_fs_obj_spotlight (2)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_obj_spotlight_t {
    hmm_vec3 atte;
    float cutoff;
    hmm_vec3 ambi;
    float outcutoff;
    hmm_vec3 diff;
    uint8_t _pad_44[4];
    hmm_vec3 spec;
    uint8_t _pad_60[4];
} fs_obj_spotlight_t;
#pragma pack(pop)
#define SLOT_fs_obj_fast (3)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_obj_fast_t {
    float umatshine;
    uint8_t _pad_4[12];
} fs_obj_fast_t;
#pragma pack(pop)
#define SLOT_vs_paramsl (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_paramsl_t {
    hmm_mat4 mvp;
} vs_paramsl_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_obj_fast[4];
    uniform vec4 vs_obj_slow[12];
    layout(location = 3) in vec3 atang;
    layout(location = 1) in vec3 anorm;
    layout(location = 0) in vec3 apos;
    out INTERFACE
    {
        vec3 tang_fragpos;
        vec3 tang_viewpos;
        vec3 tang_dirlight_dir;
        vec3 tang_sptlight_dir;
        vec3 tang_sptlight_pos;
        vec4 tang_pntlight_pos[4];
        vec2 uv;
    } inter;
    
    layout(location = 2) in vec2 auv;
    
    void main()
    {
        mat4 _22 = mat4(vs_obj_fast[0], vs_obj_fast[1], vs_obj_fast[2], vs_obj_fast[3]);
        mat3 _31 = transpose(inverse(mat3(_22[0].xyz, _22[1].xyz, _22[2].xyz)));
        vec3 _39 = normalize(_31 * atang);
        vec3 _45 = normalize(_31 * anorm);
        vec3 _53 = normalize(_39 - (_45 * dot(_39, _45)));
        vec4 _68 = _22 * vec4(apos, 1.0);
        float _69 = _68.x;
        mat3 _91 = transpose(mat3(_53, cross(_45, _53), _45));
        inter.tang_fragpos = _91 * vec3(_69, _68.yz);
        inter.tang_viewpos = _91 * vs_obj_slow[8].xyz;
        inter.tang_dirlight_dir = _91 * vs_obj_slow[9].xyz;
        inter.tang_sptlight_dir = _91 * vs_obj_slow[10].xyz;
        inter.tang_sptlight_pos = _91 * vs_obj_slow[11].xyz;
        for (int i = 0; i < 4; i++)
        {
            inter.tang_pntlight_pos[i] = vec4(_91 * vec3(vs_obj_slow[i * 1 + 4].xyz), 0.0);
        }
        inter.uv = auv;
        gl_Position = mat4(vs_obj_slow[0], vs_obj_slow[1], vs_obj_slow[2], vs_obj_slow[3]) * vec4(_69, _68.yz, 1.0);
    }
    
*/
static const char vs_obj_source_glsl330[1384] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x6f,0x62,
    0x6a,0x5f,0x66,0x61,0x73,0x74,0x5b,0x34,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,
    0x6c,0x6f,0x77,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x74,0x61,0x6e,0x67,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6e,0x6f,0x72,0x6d,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x70,
    0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x49,0x4e,0x54,0x45,0x52,0x46,0x41,0x43,
    0x45,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,
    0x67,0x5f,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,
    0x64,0x69,0x72,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x73,0x70,0x74,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x73,0x70,0x74,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x74,
    0x61,0x6e,0x67,0x5f,0x70,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x6f,0x73,
    0x5b,0x34,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,
    0x3b,0x0a,0x7d,0x20,0x69,0x6e,0x74,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x75,0x76,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,
    0x28,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x66,0x61,0x73,0x74,0x5b,0x30,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x66,0x61,0x73,0x74,0x5b,0x31,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x66,0x61,0x73,0x74,0x5b,0x32,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x66,0x61,0x73,0x74,0x5b,0x33,0x5d,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x33,0x20,0x5f,0x33,0x31,0x20,0x3d,
    0x20,0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x69,0x6e,0x76,0x65,0x72,
    0x73,0x65,0x28,0x6d,0x61,0x74,0x33,0x28,0x5f,0x32,0x32,0x5b,0x30,0x5d,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x5f,0x32,0x32,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,
    0x5f,0x32,0x32,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x39,0x20,0x3d,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x33,0x31,0x20,0x2a,0x20,0x61,0x74,
    0x61,0x6e,0x67,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x34,0x35,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,
    0x33,0x31,0x20,0x2a,0x20,0x61,0x6e,0x6f,0x72,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x35,0x33,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x33,0x39,0x20,0x2d,0x20,0x28,0x5f,0x34,0x35,
    0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x5f,0x33,0x39,0x2c,0x20,0x5f,0x34,0x35,0x29,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x36,0x38,
    0x20,0x3d,0x20,0x5f,0x32,0x32,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x70,
    0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x36,0x39,0x20,0x3d,0x20,0x5f,0x36,0x38,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x33,0x20,0x5f,0x39,0x31,0x20,0x3d,0x20,
    0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x6d,0x61,0x74,0x33,0x28,0x5f,
    0x35,0x33,0x2c,0x20,0x63,0x72,0x6f,0x73,0x73,0x28,0x5f,0x34,0x35,0x2c,0x20,0x5f,
    0x35,0x33,0x29,0x2c,0x20,0x5f,0x34,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x66,0x72,0x61,0x67,0x70,
    0x6f,0x73,0x20,0x3d,0x20,0x5f,0x39,0x31,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,
    0x5f,0x36,0x39,0x2c,0x20,0x5f,0x36,0x38,0x2e,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x76,0x69,0x65,
    0x77,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x39,0x31,0x20,0x2a,0x20,0x76,0x73,0x5f,
    0x6f,0x62,0x6a,0x5f,0x73,0x6c,0x6f,0x77,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,
    0x64,0x69,0x72,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x20,0x3d,0x20,0x5f,
    0x39,0x31,0x20,0x2a,0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x6c,0x6f,0x77,
    0x5b,0x39,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,
    0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x73,0x70,0x74,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x64,0x69,0x72,0x20,0x3d,0x20,0x5f,0x39,0x31,0x20,0x2a,0x20,0x76,0x73,0x5f,
    0x6f,0x62,0x6a,0x5f,0x73,0x6c,0x6f,0x77,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,
    0x5f,0x73,0x70,0x74,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x6f,0x73,0x20,0x3d,0x20,
    0x5f,0x39,0x31,0x20,0x2a,0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x6c,0x6f,
    0x77,0x5b,0x31,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,
    0x20,0x3c,0x20,0x34,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,
    0x61,0x6e,0x67,0x5f,0x70,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x6f,0x73,
    0x5b,0x69,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x39,0x31,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x33,0x28,0x76,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x6c,0x6f,
    0x77,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x20,0x3d,0x20,0x61,0x75,
    0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x6f,0x62,0x6a,
    0x5f,0x73,0x6c,0x6f,0x77,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,
    0x5f,0x73,0x6c,0x6f,0x77,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,
    0x5f,0x73,0x6c,0x6f,0x77,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x6f,0x62,0x6a,
    0x5f,0x73,0x6c,0x6f,0x77,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,
    0x28,0x5f,0x36,0x39,0x2c,0x20,0x5f,0x36,0x38,0x2e,0x79,0x7a,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    struct dir_light_t
    {
        vec3 dir;
        vec3 ambi;
        vec3 diff;
        vec3 spec;
    };
    
    struct point_light_t
    {
        vec3 pos;
        float constant;
        float linear;
        float quadratic;
        vec3 ambi;
        vec3 diff;
        vec3 spec;
    };
    
    struct spot_light_t
    {
        vec3 pos;
        vec3 dir;
        float cutoff;
        float outcutoff;
        float constant;
        float linear;
        float quadratic;
        vec3 ambi;
        vec3 diff;
        vec3 spec;
    };
    
    struct lightdata_t
    {
        vec3 pixdiff;
        vec3 pixspec;
        vec3 normal;
        vec3 fragpos;
        vec3 viewdir;
        float matshine;
    };
    
    uniform vec4 fs_obj_dirlight[3];
    uniform vec4 fs_obj_pointlights[17];
    uniform vec4 fs_obj_spotlight[4];
    uniform vec4 fs_obj_fast[1];
    uniform sampler2D imgdiff;
    uniform sampler2D imgspec;
    uniform sampler2D imgnorm;
    
    in INTERFACE
    {
        vec3 tang_fragpos;
        vec3 tang_viewpos;
        vec3 tang_dirlight_dir;
        vec3 tang_sptlight_dir;
        vec3 tang_sptlight_pos;
        vec4 tang_pntlight_pos[4];
        vec2 uv;
    } inter;
    
    layout(location = 0) out vec4 frag;
    
    dir_light_t get_directional_light()
    {
        return dir_light_t(inter.tang_dirlight_dir, fs_obj_dirlight[0].xyz, fs_obj_dirlight[1].xyz, fs_obj_dirlight[2].xyz);
    }
    
    vec3 calc_dir_light(dir_light_t light, lightdata_t lightdata)
    {
        vec3 _134 = normalize(-light.dir);
        return ((light.ambi * lightdata.pixdiff) + ((light.diff * max(dot(lightdata.normal, _134), 0.0)) * lightdata.pixdiff)) + ((light.spec * pow(max(dot(lightdata.normal, normalize(_134 + lightdata.viewdir)), 0.0), lightdata.matshine)) * lightdata.pixspec);
    }
    
    point_light_t get_point_light(int i)
    {
        return point_light_t(inter.tang_pntlight_pos[i].xyz, fs_obj_pointlights[i * 1 + 12].x, fs_obj_pointlights[i * 1 + 12].y, fs_obj_pointlights[i * 1 + 12].z, fs_obj_pointlights[i * 1 + 0].xyz, fs_obj_pointlights[i * 1 + 4].xyz, fs_obj_pointlights[i * 1 + 8].xyz);
    }
    
    vec3 calc_point_light(point_light_t light, lightdata_t lightdata)
    {
        vec3 _185 = light.pos - lightdata.fragpos;
        vec3 _186 = normalize(_185);
        float _208 = length(_185);
        float _222 = 1.0 / ((light.constant + (light.linear * _208)) + (light.quadratic * (_208 * _208)));
        return (((light.ambi * lightdata.pixdiff) * _222) + (((light.diff * max(dot(lightdata.normal, _186), 0.0)) * lightdata.pixdiff) * _222)) + (((light.spec * pow(max(dot(lightdata.viewdir, reflect(-_186, lightdata.normal)), 0.0), lightdata.matshine)) * lightdata.pixspec) * _222);
    }
    
    spot_light_t get_spot_light()
    {
        return spot_light_t(inter.tang_sptlight_pos, inter.tang_sptlight_dir, fs_obj_spotlight[0].w, fs_obj_spotlight[1].w, fs_obj_spotlight[0].x, fs_obj_spotlight[0].y, fs_obj_spotlight[0].z, fs_obj_spotlight[1].xyz, fs_obj_spotlight[2].xyz, fs_obj_spotlight[3].xyz);
    }
    
    vec3 calc_spot_light(spot_light_t light, lightdata_t lightdata)
    {
        vec3 _259 = light.pos - lightdata.fragpos;
        vec3 _260 = normalize(_259);
        float _282 = length(_259);
        float _334 = (1.0 / ((light.constant + (light.linear * _282)) + (light.quadratic * (_282 * _282)))) * clamp((dot(_260, normalize(-light.dir)) - light.outcutoff) / (light.cutoff - light.outcutoff), 0.0, 1.0);
        return (((light.ambi * lightdata.pixdiff) * _334) + (((light.diff * max(dot(lightdata.normal, _260), 0.0)) * lightdata.pixdiff) * _334)) + (((light.spec * pow(max(dot(lightdata.viewdir, reflect(-_260, lightdata.normal)), 0.0), lightdata.matshine)) * lightdata.pixspec) * _334);
    }
    
    void main()
    {
        lightdata_t _482 = lightdata_t(vec3(texture(imgdiff, inter.uv).xyz), vec3(texture(imgspec, inter.uv).xyz), normalize((vec3(texture(imgnorm, inter.uv).xyz) * 2.0) - vec3(1.0)), inter.tang_fragpos, normalize(inter.tang_viewpos - inter.tang_fragpos), fs_obj_fast[0].x);
        vec3 result = calc_dir_light(get_directional_light(), _482);
        int _427 = int(fs_obj_pointlights[16].x);
        for (int i = 0; i < 4; i++)
        {
            if ((_427 & (1 << i)) != 0)
            {
                result += calc_point_light(get_point_light(i), _482);
            }
        }
        vec3 _455 = result;
        vec3 _456 = _455 + calc_spot_light(get_spot_light(), _482);
        result = _456;
        frag = vec4(_456, 1.0);
    }
    
*/
static const char fs_obj_source_glsl330[4099] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x70,0x65,0x63,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x71,0x75,0x61,0x64,0x72,0x61,0x74,0x69,0x63,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x70,0x65,0x63,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,0x70,0x6f,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,
    0x75,0x74,0x6f,0x66,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6f,0x75,0x74,0x63,0x75,0x74,0x6f,0x66,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x71,0x75,0x61,0x64,
    0x72,0x61,0x74,0x69,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x61,0x6d,0x62,0x69,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,
    0x69,0x66,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x70,
    0x65,0x63,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x5f,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x69,0x78,0x64,0x69,0x66,0x66,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x69,0x78,0x73,0x70,0x65,0x63,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x70,
    0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,
    0x77,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x6d,0x61,0x74,0x73,0x68,0x69,0x6e,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x6f,0x62,
    0x6a,0x5f,0x64,0x69,0x72,0x6c,0x69,0x67,0x68,0x74,0x5b,0x33,0x5d,0x3b,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x6f,
    0x62,0x6a,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,
    0x37,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,
    0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,0x6f,0x74,0x6c,0x69,0x67,0x68,
    0x74,0x5b,0x34,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x66,0x61,0x73,0x74,0x5b,0x31,
    0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x32,0x44,0x20,0x69,0x6d,0x67,0x64,0x69,0x66,0x66,0x3b,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x6d,0x67,0x6e,0x6f,
    0x72,0x6d,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x49,0x4e,0x54,0x45,0x52,0x46,0x41,0x43,
    0x45,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,
    0x67,0x5f,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,
    0x64,0x69,0x72,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x73,0x70,0x74,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x73,0x70,0x74,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x74,
    0x61,0x6e,0x67,0x5f,0x70,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x5f,0x70,0x6f,0x73,
    0x5b,0x34,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,
    0x3b,0x0a,0x7d,0x20,0x69,0x6e,0x74,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x3b,0x0a,
    0x0a,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x67,0x65,0x74,
    0x5f,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x61,0x6c,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x28,0x69,0x6e,
    0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x64,0x69,0x72,0x6c,0x69,0x67,0x68,
    0x74,0x5f,0x64,0x69,0x72,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x64,0x69,
    0x72,0x6c,0x69,0x67,0x68,0x74,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,
    0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x64,0x69,0x72,0x6c,0x69,0x67,0x68,0x74,0x5b,0x31,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x64,0x69,
    0x72,0x6c,0x69,0x67,0x68,0x74,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6c,0x63,0x5f,0x64,0x69,0x72,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,
    0x61,0x74,0x61,0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x33,0x34,
    0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,0x6c,0x69,
    0x67,0x68,0x74,0x2e,0x64,0x69,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x61,0x6d,0x62,
    0x69,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x70,0x69,
    0x78,0x64,0x69,0x66,0x66,0x29,0x20,0x2b,0x20,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x64,0x69,0x66,0x66,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,
    0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x2c,0x20,0x5f,0x31,0x33,0x34,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2a,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x70,0x69,0x78,0x64,0x69,
    0x66,0x66,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x73,
    0x70,0x65,0x63,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,
    0x74,0x28,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x31,
    0x33,0x34,0x20,0x2b,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x76,
    0x69,0x65,0x77,0x64,0x69,0x72,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x6d,0x61,0x74,0x73,0x68,0x69,
    0x6e,0x65,0x29,0x29,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,
    0x2e,0x70,0x69,0x78,0x73,0x70,0x65,0x63,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x70,0x6f,
    0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x67,0x65,0x74,0x5f,
    0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x69,0x6e,0x74,0x20,
    0x69,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x28,0x69,0x6e,
    0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x70,0x6e,0x74,0x6c,0x69,0x67,0x68,
    0x74,0x5f,0x70,0x6f,0x73,0x5b,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,
    0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x73,
    0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x32,0x5d,0x2e,0x78,0x2c,0x20,
    0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x6c,0x69,0x67,0x68,
    0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x32,0x5d,0x2e,0x79,
    0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x6c,0x69,
    0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,0x32,0x5d,
    0x2e,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,0x69,0x6e,0x74,
    0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x30,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,
    0x69,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,
    0x2b,0x20,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,
    0x5f,0x70,0x6f,0x69,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,
    0x20,0x31,0x20,0x2b,0x20,0x38,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6c,0x63,0x5f,0x70,0x6f,0x69,0x6e,0x74,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x64,0x61,0x74,0x61,0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,
    0x61,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,
    0x38,0x35,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,0x2e,0x70,0x6f,0x73,0x20,0x2d,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x66,0x72,0x61,0x67,0x70,
    0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x38,
    0x36,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x31,
    0x38,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x32,0x30,0x38,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x31,0x38,
    0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,
    0x32,0x32,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x28,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x2b,0x20,0x28,0x6c,
    0x69,0x67,0x68,0x74,0x2e,0x6c,0x69,0x6e,0x65,0x61,0x72,0x20,0x2a,0x20,0x5f,0x32,
    0x30,0x38,0x29,0x29,0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x71,0x75,
    0x61,0x64,0x72,0x61,0x74,0x69,0x63,0x20,0x2a,0x20,0x28,0x5f,0x32,0x30,0x38,0x20,
    0x2a,0x20,0x5f,0x32,0x30,0x38,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x61,
    0x6d,0x62,0x69,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,
    0x70,0x69,0x78,0x64,0x69,0x66,0x66,0x29,0x20,0x2a,0x20,0x5f,0x32,0x32,0x32,0x29,
    0x20,0x2b,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,0x66,0x66,
    0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x64,0x61,0x74,0x61,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x5f,0x31,0x38,
    0x36,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x64,0x61,0x74,0x61,0x2e,0x70,0x69,0x78,0x64,0x69,0x66,0x66,0x29,0x20,0x2a,
    0x20,0x5f,0x32,0x32,0x32,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x73,0x70,0x65,0x63,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,
    0x78,0x28,0x64,0x6f,0x74,0x28,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,
    0x76,0x69,0x65,0x77,0x64,0x69,0x72,0x2c,0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,
    0x28,0x2d,0x5f,0x31,0x38,0x36,0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,
    0x61,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x6d,0x61,0x74,0x73,
    0x68,0x69,0x6e,0x65,0x29,0x29,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,
    0x74,0x61,0x2e,0x70,0x69,0x78,0x73,0x70,0x65,0x63,0x29,0x20,0x2a,0x20,0x5f,0x32,
    0x32,0x32,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x5f,0x74,0x20,0x67,0x65,0x74,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x28,
    0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x73,0x70,0x74,0x6c,0x69,
    0x67,0x68,0x74,0x5f,0x70,0x6f,0x73,0x2c,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,
    0x61,0x6e,0x67,0x5f,0x73,0x70,0x74,0x6c,0x69,0x67,0x68,0x74,0x5f,0x64,0x69,0x72,
    0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,0x6f,0x74,0x6c,0x69,0x67,
    0x68,0x74,0x5b,0x30,0x5d,0x2e,0x77,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,
    0x73,0x70,0x6f,0x74,0x6c,0x69,0x67,0x68,0x74,0x5b,0x31,0x5d,0x2e,0x77,0x2c,0x20,
    0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,0x6f,0x74,0x6c,0x69,0x67,0x68,0x74,
    0x5b,0x30,0x5d,0x2e,0x78,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,
    0x6f,0x74,0x6c,0x69,0x67,0x68,0x74,0x5b,0x30,0x5d,0x2e,0x79,0x2c,0x20,0x66,0x73,
    0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,0x6f,0x74,0x6c,0x69,0x67,0x68,0x74,0x5b,0x30,
    0x5d,0x2e,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,0x6f,0x74,
    0x6c,0x69,0x67,0x68,0x74,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,
    0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,0x6f,0x74,0x6c,0x69,0x67,0x68,0x74,0x5b,0x32,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x73,0x70,
    0x6f,0x74,0x6c,0x69,0x67,0x68,0x74,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6c,0x63,0x5f,0x73,0x70,
    0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x6c,0x69,0x67,
    0x68,0x74,0x64,0x61,0x74,0x61,0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,
    0x74,0x61,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x32,0x35,0x39,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,0x2e,0x70,0x6f,0x73,0x20,
    0x2d,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x66,0x72,0x61,0x67,
    0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,
    0x36,0x30,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,
    0x32,0x35,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x32,0x38,0x32,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x32,
    0x35,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x33,0x33,0x34,0x20,0x3d,0x20,0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x28,0x6c,
    0x69,0x67,0x68,0x74,0x2e,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x2b,0x20,
    0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x6c,0x69,0x6e,0x65,0x61,0x72,0x20,0x2a,0x20,
    0x5f,0x32,0x38,0x32,0x29,0x29,0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,
    0x71,0x75,0x61,0x64,0x72,0x61,0x74,0x69,0x63,0x20,0x2a,0x20,0x28,0x5f,0x32,0x38,
    0x32,0x20,0x2a,0x20,0x5f,0x32,0x38,0x32,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x28,0x64,0x6f,0x74,0x28,0x5f,0x32,0x36,0x30,0x2c,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x64,0x69,0x72,0x29,0x29,0x20,0x2d,0x20,0x6c,0x69,0x67,0x68,0x74,0x2e,0x6f,
    0x75,0x74,0x63,0x75,0x74,0x6f,0x66,0x66,0x29,0x20,0x2f,0x20,0x28,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x63,0x75,0x74,0x6f,0x66,0x66,0x20,0x2d,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x2e,0x6f,0x75,0x74,0x63,0x75,0x74,0x6f,0x66,0x66,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x61,0x6d,0x62,
    0x69,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x70,0x69,
    0x78,0x64,0x69,0x66,0x66,0x29,0x20,0x2a,0x20,0x5f,0x33,0x33,0x34,0x29,0x20,0x2b,
    0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,0x66,0x66,0x20,0x2a,
    0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,
    0x74,0x61,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x5f,0x32,0x36,0x30,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,
    0x61,0x74,0x61,0x2e,0x70,0x69,0x78,0x64,0x69,0x66,0x66,0x29,0x20,0x2a,0x20,0x5f,
    0x33,0x33,0x34,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x73,0x70,0x65,0x63,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,
    0x64,0x6f,0x74,0x28,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x76,0x69,
    0x65,0x77,0x64,0x69,0x72,0x2c,0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,
    0x5f,0x32,0x36,0x30,0x2c,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,0x2e,0x6d,0x61,0x74,0x73,0x68,0x69,
    0x6e,0x65,0x29,0x29,0x20,0x2a,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,0x61,
    0x2e,0x70,0x69,0x78,0x73,0x70,0x65,0x63,0x29,0x20,0x2a,0x20,0x5f,0x33,0x33,0x34,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x61,0x74,
    0x61,0x5f,0x74,0x20,0x5f,0x34,0x38,0x32,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x64,0x61,0x74,0x61,0x5f,0x74,0x28,0x76,0x65,0x63,0x33,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x64,0x69,0x66,0x66,0x2c,0x20,0x69,0x6e,0x74,
    0x65,0x72,0x2e,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x73,0x70,0x65,
    0x63,0x2c,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,0x76,0x65,
    0x63,0x33,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x6e,0x6f,
    0x72,0x6d,0x2c,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x29,0x2e,0x78,0x79,
    0x7a,0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,
    0x28,0x31,0x2e,0x30,0x29,0x29,0x2c,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,
    0x6e,0x67,0x5f,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x2c,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x69,0x7a,0x65,0x28,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,
    0x5f,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,0x20,0x2d,0x20,0x69,0x6e,0x74,0x65,0x72,
    0x2e,0x74,0x61,0x6e,0x67,0x5f,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x29,0x2c,0x20,
    0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x66,0x61,0x73,0x74,0x5b,0x30,0x5d,0x2e,0x78,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x72,0x65,0x73,0x75,
    0x6c,0x74,0x20,0x3d,0x20,0x63,0x61,0x6c,0x63,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x28,0x67,0x65,0x74,0x5f,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,
    0x6e,0x61,0x6c,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x29,0x2c,0x20,0x5f,0x34,0x38,
    0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x34,0x32,0x37,
    0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,
    0x69,0x6e,0x74,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,0x36,0x5d,0x2e,0x78,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,
    0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,0x20,0x34,0x3b,0x20,0x69,0x2b,0x2b,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x28,0x5f,0x34,0x32,0x37,0x20,0x26,0x20,0x28,0x31,0x20,0x3c,
    0x3c,0x20,0x69,0x29,0x29,0x20,0x21,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x2b,0x3d,0x20,0x63,0x61,0x6c,0x63,
    0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x67,0x65,0x74,
    0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x69,0x29,0x2c,
    0x20,0x5f,0x34,0x38,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x34,0x35,0x35,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,0x35,0x36,0x20,0x3d,0x20,
    0x5f,0x34,0x35,0x35,0x20,0x2b,0x20,0x63,0x61,0x6c,0x63,0x5f,0x73,0x70,0x6f,0x74,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x67,0x65,0x74,0x5f,0x73,0x70,0x6f,0x74,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x28,0x29,0x2c,0x20,0x5f,0x34,0x38,0x32,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x34,0x35,
    0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x5f,0x34,0x35,0x36,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 vs_paramsl[4];
    layout(location = 0) in vec3 pos;
    
    void main()
    {
        gl_Position = mat4(vs_paramsl[0], vs_paramsl[1], vs_paramsl[2], vs_paramsl[3]) * vec4(pos, 1.0);
    }
    
*/
static const char light_cube_vs_source_glsl330[196] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x6c,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x30,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x31,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x32,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    layout(location = 0) out vec4 frag;
    
    void main()
    {
        frag = vec4(1.0);
    }
    
*/
static const char light_cube_fs_source_glsl330[91] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before genshd_combo.h"
#endif
static inline const sg_shader_desc* light_cube_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.vs.source = light_cube_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_paramsl";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = light_cube_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "light_cube_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* shdobj_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "apos";
      desc.attrs[1].name = "anorm";
      desc.attrs[2].name = "auv";
      desc.attrs[3].name = "atang";
      desc.vs.source = vs_obj_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_obj_fast";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.vs.uniform_blocks[1].size = 192;
      desc.vs.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[1].uniforms[0].name = "vs_obj_slow";
      desc.vs.uniform_blocks[1].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[1].uniforms[0].array_count = 12;
      desc.fs.source = fs_obj_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 48;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_obj_dirlight";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 3;
      desc.fs.uniform_blocks[1].size = 272;
      desc.fs.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[1].uniforms[0].name = "fs_obj_pointlights";
      desc.fs.uniform_blocks[1].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[1].uniforms[0].array_count = 17;
      desc.fs.uniform_blocks[2].size = 64;
      desc.fs.uniform_blocks[2].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[2].uniforms[0].name = "fs_obj_spotlight";
      desc.fs.uniform_blocks[2].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[2].uniforms[0].array_count = 4;
      desc.fs.uniform_blocks[3].size = 16;
      desc.fs.uniform_blocks[3].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[3].uniforms[0].name = "fs_obj_fast";
      desc.fs.uniform_blocks[3].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[3].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "imgdiff";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "imgspec";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[2].name = "imgnorm";
      desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[2].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "shdobj_shader";
    }
    return &desc;
  }
  return 0;
}
