#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input shd_terrain.glsl --output genshd_terrain.h --slang glsl330

    Overview:

        Shader program 'terrainshd':
            Get shader desc: terrainshd_shader_desc(sg_query_backend());
            Vertex shader: vs_terrain
                Attribute slots:
                    ATTR_vs_terrain_apos = 0
                    ATTR_vs_terrain_anorm = 1
                    ATTR_vs_terrain_auv = 2
                    ATTR_vs_terrain_atang = 3
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs_terrain
                Uniform block 'fs_params':
                    C struct: fs_params_t
                    Bind slot: SLOT_fs_params = 0
                Image 'imgblend':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgblend = 0
                Image 'imgdiff':
                    Type: SG_IMAGETYPE_ARRAY
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgdiff = 1
                Image 'imgspec':
                    Type: SG_IMAGETYPE_ARRAY
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgspec = 2
                Image 'imgnorm':
                    Type: SG_IMAGETYPE_ARRAY
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgnorm = 3


    Shader descriptor structs:

        sg_shader terrainshd = sg_make_shader(terrainshd_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs_terrain':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_terrain_apos] = { ... },
                    [ATTR_vs_terrain_anorm] = { ... },
                    [ATTR_vs_terrain_auv] = { ... },
                    [ATTR_vs_terrain_atang] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_imgblend = 0;
        SLOT_imgdiff = 1;
        SLOT_imgspec = 2;
        SLOT_imgnorm = 3;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .vp = ...;
            .model = ...;
            .lightpos = ...;
            .viewpos = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'fs_params':

        fs_params_t fs_params = {
            .uambi = ...;
            .udiff = ...;
            .uspec = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_params, &SG_RANGE(fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_terrain_apos (0)
#define ATTR_vs_terrain_anorm (1)
#define ATTR_vs_terrain_auv (2)
#define ATTR_vs_terrain_atang (3)
#define SLOT_imgblend (0)
#define SLOT_imgdiff (1)
#define SLOT_imgspec (2)
#define SLOT_imgnorm (3)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    hmm_mat4 vp;
    hmm_mat4 model;
    hmm_vec3 lightpos;
    uint8_t _pad_140[4];
    hmm_vec3 viewpos;
    uint8_t _pad_156[4];
} vs_params_t;
#pragma pack(pop)
#define SLOT_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    hmm_vec3 uambi;
    uint8_t _pad_12[4];
    hmm_vec3 udiff;
    uint8_t _pad_28[4];
    hmm_vec3 uspec;
    uint8_t _pad_44[4];
} fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[10];
    out INTERFACE
    {
        vec2 uv;
        vec3 tang_lightpos;
        vec3 tang_viewpos;
        vec3 tang_fragpos;
    } inter;
    
    layout(location = 2) in vec2 auv;
    layout(location = 3) in vec3 atang;
    layout(location = 1) in vec3 anorm;
    layout(location = 0) in vec3 apos;
    
    void main()
    {
        inter.uv = auv;
        mat4 _32 = mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]);
        mat3 _39 = mat3(_32[0].xyz, _32[1].xyz, _32[2].xyz);
        vec3 _47 = normalize(_39 * atang);
        vec3 _53 = normalize(_39 * anorm);
        vec3 _61 = normalize(_47 - (_53 * dot(_47, _53)));
        mat3 _85 = transpose(mat3(_61, cross(_53, _61), _53));
        inter.tang_lightpos = _85 * vs_params[8].xyz;
        inter.tang_viewpos = _85 * vs_params[9].xyz;
        vec4 _108 = vec4(apos, 1.0);
        inter.tang_fragpos = _85 * vec3((_32 * _108).xyz);
        gl_Position = (mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * _32) * _108;
    }
    
*/
static const char vs_terrain_source_glsl330[939] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x49,0x4e,
    0x54,0x45,0x52,0x46,0x41,0x43,0x45,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x74,0x61,0x6e,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x70,0x6f,0x73,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x76,0x69,0x65,
    0x77,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,
    0x61,0x6e,0x67,0x5f,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x7d,0x20,0x69,
    0x6e,0x74,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x61,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x74,0x61,0x6e,0x67,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6e,0x6f,0x72,0x6d,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x70,
    0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x20,
    0x3d,0x20,0x61,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,
    0x5f,0x33,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,
    0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x33,0x20,0x5f,0x33,0x39,
    0x20,0x3d,0x20,0x6d,0x61,0x74,0x33,0x28,0x5f,0x33,0x32,0x5b,0x30,0x5d,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x5f,0x33,0x32,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,
    0x5f,0x33,0x32,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x33,0x39,0x20,0x2a,0x20,0x61,0x74,0x61,0x6e,
    0x67,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x35,0x33,
    0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,0x33,0x39,
    0x20,0x2a,0x20,0x61,0x6e,0x6f,0x72,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x36,0x31,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x69,0x7a,0x65,0x28,0x5f,0x34,0x37,0x20,0x2d,0x20,0x28,0x5f,0x35,0x33,0x20,0x2a,
    0x20,0x64,0x6f,0x74,0x28,0x5f,0x34,0x37,0x2c,0x20,0x5f,0x35,0x33,0x29,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x33,0x20,0x5f,0x38,0x35,0x20,0x3d,
    0x20,0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x6d,0x61,0x74,0x33,0x28,
    0x5f,0x36,0x31,0x2c,0x20,0x63,0x72,0x6f,0x73,0x73,0x28,0x5f,0x35,0x33,0x2c,0x20,
    0x5f,0x36,0x31,0x29,0x2c,0x20,0x5f,0x35,0x33,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x38,0x35,0x20,0x2a,0x20,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x76,0x69,
    0x65,0x77,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x38,0x35,0x20,0x2a,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x30,0x38,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x61,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,
    0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x20,0x3d,0x20,0x5f,0x38,0x35,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x33,0x28,0x28,0x5f,0x33,0x32,0x20,0x2a,0x20,0x5f,0x31,0x30,0x38,
    0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x33,0x32,0x29,0x20,0x2a,
    0x20,0x5f,0x31,0x30,0x38,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_params[3];
    uniform sampler2D imgblend;
    uniform sampler2DArray imgdiff;
    uniform sampler2DArray imgspec;
    uniform sampler2DArray imgnorm;
    
    in INTERFACE
    {
        vec2 uv;
        vec3 tang_lightpos;
        vec3 tang_viewpos;
        vec3 tang_fragpos;
    } inter;
    
    layout(location = 0) out vec4 fragcolor;
    
    void main()
    {
        vec3 _48 = vec3(inter.uv.x * 10.0, inter.uv.y * 10.0, texture(imgblend, inter.uv).x * 256.0);
        vec3 _76 = normalize((texture(imgnorm, _48).xyz * 2.0) - vec3(1.0));
        vec3 _86 = normalize(-inter.tang_lightpos);
        fragcolor = vec4(((texture(imgdiff, _48).xyz * max(dot(_76, _86), 0.0)) * fs_params[1].xyz) + ((texture(imgspec, _48).xyz * pow(max(dot(_76, reflect(-_86, _76)), 0.0), 32.0)) * fs_params[2].xyz), 1.0);
    }
    
*/
static const char fs_terrain_source_glsl330[759] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x6d,0x67,0x62,0x6c,
    0x65,0x6e,0x64,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x69,0x6d,0x67,0x64,
    0x69,0x66,0x66,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x69,0x6d,0x67,0x73,
    0x70,0x65,0x63,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x41,0x72,0x72,0x61,0x79,0x20,0x69,0x6d,0x67,0x6e,
    0x6f,0x72,0x6d,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x49,0x4e,0x54,0x45,0x52,0x46,0x41,
    0x43,0x45,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x76,0x69,0x65,0x77,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x74,0x61,0x6e,0x67,0x5f,0x66,
    0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x7d,0x20,0x69,0x6e,0x74,0x65,0x72,0x3b,
    0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x66,0x72,0x61,0x67,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,
    0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x5f,0x34,0x38,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x69,0x6e,
    0x74,0x65,0x72,0x2e,0x75,0x76,0x2e,0x78,0x20,0x2a,0x20,0x31,0x30,0x2e,0x30,0x2c,
    0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x2e,0x79,0x20,0x2a,0x20,0x31,0x30,
    0x2e,0x30,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x62,
    0x6c,0x65,0x6e,0x64,0x2c,0x20,0x69,0x6e,0x74,0x65,0x72,0x2e,0x75,0x76,0x29,0x2e,
    0x78,0x20,0x2a,0x20,0x32,0x35,0x36,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x37,0x36,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x69,0x7a,0x65,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x6d,
    0x67,0x6e,0x6f,0x72,0x6d,0x2c,0x20,0x5f,0x34,0x38,0x29,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,
    0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x38,
    0x36,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,0x69,
    0x6e,0x74,0x65,0x72,0x2e,0x74,0x61,0x6e,0x67,0x5f,0x6c,0x69,0x67,0x68,0x74,0x70,
    0x6f,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x64,0x69,0x66,0x66,0x2c,0x20,0x5f,0x34,0x38,
    0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,
    0x5f,0x37,0x36,0x2c,0x20,0x5f,0x38,0x36,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x2c,0x20,0x5f,0x34,0x38,0x29,0x2e,0x78,
    0x79,0x7a,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,
    0x28,0x5f,0x37,0x36,0x2c,0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x5f,
    0x38,0x36,0x2c,0x20,0x5f,0x37,0x36,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,
    0x20,0x33,0x32,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before genshd_terrain.h"
#endif
static inline const sg_shader_desc* terrainshd_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "apos";
      desc.attrs[1].name = "anorm";
      desc.attrs[2].name = "auv";
      desc.attrs[3].name = "atang";
      desc.vs.source = vs_terrain_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 160;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 10;
      desc.fs.source = fs_terrain_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 48;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 3;
      desc.fs.images[0].name = "imgblend";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "imgdiff";
      desc.fs.images[1].image_type = SG_IMAGETYPE_ARRAY;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[2].name = "imgspec";
      desc.fs.images[2].image_type = SG_IMAGETYPE_ARRAY;
      desc.fs.images[2].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[3].name = "imgnorm";
      desc.fs.images[3].image_type = SG_IMAGETYPE_ARRAY;
      desc.fs.images[3].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "terrainshd_shader";
    }
    return &desc;
  }
  return 0;
}
