#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input combo.glsl --output genshader.h --slang glsl330

    Overview:

        Shader program 'comboshader':
            Get shader desc: comboshader_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_position = 0
                    ATTR_vs_normal = 1
                    ATTR_vs_texcoord = 2
                Uniform block 'vs_params':
                    C struct: vs_params_t
                    Bind slot: SLOT_vs_params = 0
            Fragment shader: fs
                Uniform block 'fs_params':
                    C struct: fs_params_t
                    Bind slot: SLOT_fs_params = 0
                Uniform block 'fs_point_lights':
                    C struct: fs_point_lights_t
                    Bind slot: SLOT_fs_point_lights = 1
                Uniform block 'fs_dir_light':
                    C struct: fs_dir_light_t
                    Bind slot: SLOT_fs_dir_light = 2
                Uniform block 'fs_spot_light':
                    C struct: fs_spot_light_t
                    Bind slot: SLOT_fs_spot_light = 3
                Image 'imgdiff':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgdiff = 0
                Image 'imgspec':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_imgspec = 1

        Shader program 'light_cube':
            Get shader desc: light_cube_shader_desc(sg_query_backend());
            Vertex shader: light_cube_vs
                Attribute slots:
                    ATTR_light_cube_vs_pos = 0
                Uniform block 'vs_paramsl':
                    C struct: vs_paramsl_t
                    Bind slot: SLOT_vs_paramsl = 0
            Fragment shader: light_cube_fs


    Shader descriptor structs:

        sg_shader comboshader = sg_make_shader(comboshader_shader_desc(sg_query_backend()));
        sg_shader light_cube = sg_make_shader(light_cube_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_position] = { ... },
                    [ATTR_vs_normal] = { ... },
                    [ATTR_vs_texcoord] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'light_cube_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_light_cube_vs_pos] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_imgdiff = 0;
        SLOT_imgspec = 1;

    Bind slot and C-struct for uniform block 'vs_params':

        vs_params_t vs_params = {
            .model = ...;
            .vp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'fs_params':

        fs_params_t fs_params = {
            .viewpos = ...;
            .matshine = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_params, &SG_RANGE(fs_params));

    Bind slot and C-struct for uniform block 'fs_point_lights':

        fs_point_lights_t fs_point_lights = {
            .position = ...;
            .ambient = ...;
            .diffuse = ...;
            .specular = ...;
            .attenuation = ...;
            .enabled = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_point_lights, &SG_RANGE(fs_point_lights));

    Bind slot and C-struct for uniform block 'fs_dir_light':

        fs_dir_light_t fs_dir_light = {
            .direction = ...;
            .ambient = ...;
            .diffuse = ...;
            .specular = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_dir_light, &SG_RANGE(fs_dir_light));

    Bind slot and C-struct for uniform block 'fs_spot_light':

        fs_spot_light_t fs_spot_light = {
            .position = ...;
            .direction = ...;
            .cutoff = ...;
            .outcutoff = ...;
            .attenuation = ...;
            .ambient = ...;
            .diffuse = ...;
            .specular = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fs_spot_light, &SG_RANGE(fs_spot_light));

    Bind slot and C-struct for uniform block 'vs_paramsl':

        vs_paramsl_t vs_paramsl = {
            .mvp = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_vs_paramsl, &SG_RANGE(vs_paramsl));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_position (0)
#define ATTR_vs_normal (1)
#define ATTR_vs_texcoord (2)
#define ATTR_light_cube_vs_pos (0)
#define SLOT_imgdiff (0)
#define SLOT_imgspec (1)
#define SLOT_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    hmm_mat4 model;
    hmm_mat4 vp;
} vs_params_t;
#pragma pack(pop)
#define SLOT_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    hmm_vec3 viewpos;
    float matshine;
} fs_params_t;
#pragma pack(pop)
#define SLOT_fs_point_lights (1)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_point_lights_t {
    hmm_vec4 position[4];
    hmm_vec4 ambient[4];
    hmm_vec4 diffuse[4];
    hmm_vec4 specular[4];
    hmm_vec4 attenuation[4];
    float enabled;
    uint8_t _pad_324[12];
} fs_point_lights_t;
#pragma pack(pop)
#define SLOT_fs_dir_light (2)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_dir_light_t {
    hmm_vec3 direction;
    uint8_t _pad_12[4];
    hmm_vec3 ambient;
    uint8_t _pad_28[4];
    hmm_vec3 diffuse;
    uint8_t _pad_44[4];
    hmm_vec3 specular;
    uint8_t _pad_60[4];
} fs_dir_light_t;
#pragma pack(pop)
#define SLOT_fs_spot_light (3)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_spot_light_t {
    hmm_vec3 position;
    uint8_t _pad_12[4];
    hmm_vec3 direction;
    float cutoff;
    float outcutoff;
    uint8_t _pad_36[12];
    hmm_vec3 attenuation;
    uint8_t _pad_60[4];
    hmm_vec3 ambient;
    uint8_t _pad_76[4];
    hmm_vec3 diffuse;
    uint8_t _pad_92[4];
    hmm_vec3 specular;
    uint8_t _pad_108[4];
} fs_spot_light_t;
#pragma pack(pop)
#define SLOT_vs_paramsl (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_paramsl_t {
    hmm_mat4 mvp;
} vs_paramsl_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[8];
    layout(location = 0) in vec3 position;
    out vec3 fragpos;
    out vec3 normalo;
    layout(location = 1) in vec3 normal;
    out vec2 uv;
    layout(location = 2) in vec2 texcoord;
    
    void main()
    {
        mat4 _27 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);
        vec4 _37 = vec4(position, 1.0);
        gl_Position = (mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * _27) * _37;
        fragpos = vec3((_27 * _37).xyz);
        normalo = transpose(inverse(mat3(_27[0].xyz, _27[1].xyz, _27[2].xyz))) * normal;
        uv = texcoord;
    }
    
*/
static const char vs_source_glsl330[572] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x6f,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x32,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x37,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x33,0x37,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x37,0x29,0x20,0x2a,0x20,0x5f,0x33,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x28,0x5f,
    0x32,0x37,0x20,0x2a,0x20,0x5f,0x33,0x37,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x6f,0x20,0x3d,0x20,0x74,0x72,
    0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x28,
    0x6d,0x61,0x74,0x33,0x28,0x5f,0x32,0x37,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,
    0x20,0x5f,0x32,0x37,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x32,0x37,
    0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x29,0x20,0x2a,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    struct dir_light_t
    {
        vec3 direction;
        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
    };
    
    struct point_light_t
    {
        vec3 position;
        float constant;
        float linear;
        float quadratic;
        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
    };
    
    struct spot_light_t
    {
        vec3 position;
        vec3 direction;
        float cutoff;
        float outcutoff;
        float constant;
        float linear;
        float quadratic;
        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
    };
    
    uniform vec4 fs_params[1];
    uniform vec4 fs_point_lights[21];
    uniform vec4 fs_dir_light[4];
    uniform vec4 fs_spot_light[7];
    uniform sampler2D imgdiff;
    uniform sampler2D imgspec;
    
    in vec3 normalo;
    in vec3 fragpos;
    layout(location = 0) out vec4 frag_color;
    in vec2 uv;
    
    dir_light_t get_directional_light()
    {
        return dir_light_t(fs_dir_light[0].xyz, fs_dir_light[1].xyz, fs_dir_light[2].xyz, fs_dir_light[3].xyz);
    }
    
    vec3 calc_dir_light(dir_light_t light, vec3 normal, vec3 viewdir)
    {
        vec3 _223 = normalize(-light.direction);
        return (vec3(texture(imgdiff, uv).xyz) * (light.ambient + (light.diffuse * max(dot(normal, _223), 0.0)))) + ((light.specular * pow(max(dot(viewdir, reflect(-_223, normal)), 0.0), fs_params[0].w)) * vec3(texture(imgspec, uv).xyz));
    }
    
    point_light_t get_point_light(int i)
    {
        return point_light_t(fs_point_lights[i * 1 + 0].xyz, fs_point_lights[i * 1 + 16].x, fs_point_lights[i * 1 + 16].y, fs_point_lights[i * 1 + 16].z, fs_point_lights[i * 1 + 4].xyz, fs_point_lights[i * 1 + 8].xyz, fs_point_lights[i * 1 + 12].xyz);
    }
    
    vec3 calc_point_light(point_light_t light, vec3 normal, vec3 fragpos_1, vec3 viewdir)
    {
        vec3 _299 = normalize(light.position - fragpos_1);
        float _323 = length(light.position - fragpos_1);
        float _339 = 1.0 / ((light.constant + (light.linear * _323)) + (light.quadratic * (_323 * _323)));
        vec3 _347 = vec3(texture(imgdiff, uv).xyz);
        return (((light.ambient * _347) * _339) + (((light.diffuse * max(dot(normal, _299), 0.0)) * _347) * _339)) + (((light.specular * pow(max(dot(viewdir, reflect(-_299, normal)), 0.0), fs_params[0].w)) * vec3(texture(imgspec, uv).xyz)) * _339);
    }
    
    spot_light_t get_spot_light()
    {
        return spot_light_t(fs_spot_light[0].xyz, fs_spot_light[1].xyz, fs_spot_light[1].w, fs_spot_light[2].x, fs_spot_light[3].x, fs_spot_light[3].y, fs_spot_light[3].z, fs_spot_light[4].xyz, fs_spot_light[5].xyz, fs_spot_light[6].xyz);
    }
    
    vec3 calc_spot_light(spot_light_t light, vec3 normal, vec3 fragpos_1, vec3 viewdir)
    {
        vec3 _396 = normalize(light.position - fragpos_1);
        float _420 = length(light.position - fragpos_1);
        vec3 _465 = vec3(texture(imgdiff, uv).xyz);
        float _497 = (1.0 / ((light.constant + (light.linear * _420)) + (light.quadratic * (_420 * _420)))) * clamp((dot(_396, normalize(-light.direction)) - light.outcutoff) / (light.cutoff - light.outcutoff), 0.0, 1.0);
        return (((light.ambient * _465) * _497) + (((light.diffuse * max(dot(normal, _396), 0.0)) * _465) * _497)) + (((light.specular * pow(max(dot(viewdir, reflect(-_396, normal)), 0.0), fs_params[0].w)) * vec3(texture(imgspec, uv).xyz)) * _497);
    }
    
    void main()
    {
        vec3 _53 = normalize(normalo);
        vec3 _65 = normalize(fs_params[0].xyz - fragpos);
        dir_light_t param = get_directional_light();
        vec3 param_1 = _53;
        vec3 param_2 = _65;
        vec3 result = calc_dir_light(param, param_1, param_2);
        for (int i = 0; i < 4; i++)
        {
            if ((int(fs_point_lights[20].x) & (1 << i)) != 0)
            {
                int param_3 = i;
                point_light_t param_4 = get_point_light(param_3);
                vec3 param_5 = _53;
                vec3 param_6 = fragpos;
                vec3 param_7 = _65;
                result += calc_point_light(param_4, param_5, param_6, param_7);
            }
        }
        spot_light_t param_8 = get_spot_light();
        vec3 param_9 = _53;
        vec3 param_10 = fragpos;
        vec3 param_11 = _65;
        vec3 _133 = result;
        vec3 _134 = _133 + calc_spot_light(param_8, param_9, param_10, param_11);
        result = _134;
        frag_color = vec4(_134, 1.0);
    }
    
*/
static const char fs_source_glsl330[4051] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x72,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x71,0x75,0x61,0x64,
    0x72,0x61,0x74,0x69,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x5f,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x63,0x75,0x74,0x6f,0x66,0x66,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6f,0x75,0x74,0x63,0x75,
    0x74,0x6f,0x66,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x71,0x75,0x61,0x64,0x72,0x61,0x74,0x69,0x63,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x70,
    0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,
    0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x73,0x5b,0x32,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x5b,0x34,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,
    0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x5b,0x37,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x6d,0x67,0x64,0x69,0x66,0x66,0x3b,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,
    0x32,0x44,0x20,0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x3b,0x0a,0x0a,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x6f,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x75,0x76,0x3b,0x0a,0x0a,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,
    0x74,0x20,0x67,0x65,0x74,0x5f,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x61,
    0x6c,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x74,0x28,0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,
    0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,
    0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,
    0x2c,0x20,0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x33,
    0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,
    0x63,0x61,0x6c,0x63,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x64,
    0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x64,0x69,0x72,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x32,0x33,0x20,0x3d,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,0x6c,0x69,0x67,0x68,0x74,0x2e,
    0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x64,0x69,0x66,0x66,0x2c,0x20,0x75,0x76,
    0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,
    0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,
    0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x5f,0x32,0x32,0x33,0x29,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x6c,0x69,
    0x67,0x68,0x74,0x2e,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x20,0x2a,0x20,0x70,
    0x6f,0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x76,0x69,0x65,0x77,0x64,
    0x69,0x72,0x2c,0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x5f,0x32,0x32,
    0x33,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,
    0x29,0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x77,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x2c,0x20,0x75,0x76,0x29,0x2e,
    0x78,0x79,0x7a,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x70,0x6f,0x69,0x6e,0x74,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x67,0x65,0x74,0x5f,0x70,0x6f,0x69,0x6e,
    0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x69,0x6e,0x74,0x20,0x69,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x70,0x6f,0x69,0x6e,
    0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x28,0x66,0x73,0x5f,0x70,0x6f,0x69,
    0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,
    0x2b,0x20,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,
    0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,
    0x2b,0x20,0x31,0x36,0x5d,0x2e,0x78,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,
    0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,
    0x20,0x31,0x36,0x5d,0x2e,0x79,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,
    0x31,0x36,0x5d,0x2e,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x34,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x38,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x31,
    0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,
    0x20,0x63,0x61,0x6c,0x63,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x28,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,
    0x5f,0x31,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x64,0x69,0x72,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x39,
    0x39,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6c,0x69,
    0x67,0x68,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x66,
    0x72,0x61,0x67,0x70,0x6f,0x73,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x32,0x33,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,
    0x74,0x68,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x5f,0x31,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x33,0x39,0x20,0x3d,
    0x20,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x63,
    0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x6c,0x69,0x6e,0x65,0x61,0x72,0x20,0x2a,0x20,0x5f,0x33,0x32,0x33,0x29,0x29,
    0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x71,0x75,0x61,0x64,0x72,0x61,
    0x74,0x69,0x63,0x20,0x2a,0x20,0x28,0x5f,0x33,0x32,0x33,0x20,0x2a,0x20,0x5f,0x33,
    0x32,0x33,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x33,0x34,0x37,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x64,0x69,0x66,0x66,0x2c,0x20,0x75,0x76,0x29,
    0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x61,0x6d,0x62,0x69,0x65,
    0x6e,0x74,0x20,0x2a,0x20,0x5f,0x33,0x34,0x37,0x29,0x20,0x2a,0x20,0x5f,0x33,0x33,
    0x39,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x5f,0x32,0x39,0x39,0x29,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x33,0x34,0x37,0x29,0x20,0x2a,0x20,0x5f,
    0x33,0x33,0x39,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x20,0x2a,0x20,0x70,0x6f,0x77,0x28,
    0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x76,0x69,0x65,0x77,0x64,0x69,0x72,0x2c,
    0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x5f,0x32,0x39,0x39,0x2c,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,
    0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x29,0x29,
    0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x29,0x20,0x2a,0x20,0x5f,0x33,0x33,0x39,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,
    0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x67,0x65,0x74,0x5f,
    0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x70,0x6f,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x74,0x28,0x66,0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,
    0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x66,0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,
    0x5b,0x31,0x5d,0x2e,0x77,0x2c,0x20,0x66,0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5b,0x32,0x5d,0x2e,0x78,0x2c,0x20,0x66,0x73,0x5f,0x73,0x70,
    0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x33,0x5d,0x2e,0x78,0x2c,0x20,0x66,
    0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x33,0x5d,0x2e,
    0x79,0x2c,0x20,0x66,0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,
    0x5b,0x33,0x5d,0x2e,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,
    0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x35,0x5d,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x66,0x73,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,
    0x5b,0x36,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,
    0x33,0x20,0x63,0x61,0x6c,0x63,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x28,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x6c,
    0x69,0x67,0x68,0x74,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x5f,
    0x31,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x64,0x69,0x72,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x39,0x36,
    0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x66,0x72,
    0x61,0x67,0x70,0x6f,0x73,0x5f,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x34,0x32,0x30,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,
    0x68,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x5f,0x31,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,0x36,0x35,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x33,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x6d,0x67,0x64,
    0x69,0x66,0x66,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x39,0x37,0x20,0x3d,0x20,
    0x28,0x31,0x2e,0x30,0x20,0x2f,0x20,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x63,
    0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x6c,0x69,0x6e,0x65,0x61,0x72,0x20,0x2a,0x20,0x5f,0x34,0x32,0x30,0x29,0x29,
    0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x71,0x75,0x61,0x64,0x72,0x61,
    0x74,0x69,0x63,0x20,0x2a,0x20,0x28,0x5f,0x34,0x32,0x30,0x20,0x2a,0x20,0x5f,0x34,
    0x32,0x30,0x29,0x29,0x29,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,
    0x64,0x6f,0x74,0x28,0x5f,0x33,0x39,0x36,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x69,0x7a,0x65,0x28,0x2d,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,0x72,0x65,0x63,
    0x74,0x69,0x6f,0x6e,0x29,0x29,0x20,0x2d,0x20,0x6c,0x69,0x67,0x68,0x74,0x2e,0x6f,
    0x75,0x74,0x63,0x75,0x74,0x6f,0x66,0x66,0x29,0x20,0x2f,0x20,0x28,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x63,0x75,0x74,0x6f,0x66,0x66,0x20,0x2d,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x2e,0x6f,0x75,0x74,0x63,0x75,0x74,0x6f,0x66,0x66,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x61,0x6d,0x62,
    0x69,0x65,0x6e,0x74,0x20,0x2a,0x20,0x5f,0x34,0x36,0x35,0x29,0x20,0x2a,0x20,0x5f,
    0x34,0x39,0x37,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,
    0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,
    0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x5f,0x33,0x39,0x36,0x29,0x2c,
    0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x34,0x36,0x35,0x29,0x20,0x2a,
    0x20,0x5f,0x34,0x39,0x37,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x20,0x2a,0x20,0x70,0x6f,
    0x77,0x28,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x76,0x69,0x65,0x77,0x64,0x69,
    0x72,0x2c,0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x2d,0x5f,0x33,0x39,0x36,
    0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,
    0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x69,0x6d,0x67,0x73,0x70,0x65,0x63,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,
    0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x5f,0x34,0x39,0x37,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x35,0x33,0x20,0x3d,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x6f,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x36,0x35,0x20,0x3d,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x20,0x2d,0x20,0x66,0x72,
    0x61,0x67,0x70,0x6f,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x69,0x72,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x67,0x65,0x74,0x5f,0x64,0x69,0x72,0x65,0x63,0x74,0x69,0x6f,0x6e,0x61,0x6c,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x35,0x33,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x20,0x3d,0x20,0x5f,0x36,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x63,0x61,0x6c,0x63,0x5f,
    0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,
    0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,0x20,0x34,0x3b,0x20,0x69,
    0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x70,0x6f,
    0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x32,0x30,0x5d,0x2e,0x78,
    0x29,0x20,0x26,0x20,0x28,0x31,0x20,0x3c,0x3c,0x20,0x69,0x29,0x29,0x20,0x21,0x3d,
    0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x69,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x5f,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x67,
    0x65,0x74,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x35,0x20,0x3d,0x20,0x5f,0x35,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x36,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x5f,0x36,0x35,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,
    0x2b,0x3d,0x20,0x63,0x61,0x6c,0x63,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x73,0x70,0x6f,
    0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x38,0x20,0x3d,0x20,0x67,0x65,0x74,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x39,0x20,0x3d,0x20,0x5f,0x35,0x33,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x20,
    0x3d,0x20,0x66,0x72,0x61,0x67,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x31,0x20,0x3d,0x20,0x5f,
    0x36,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x33,
    0x33,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x33,0x34,0x20,0x3d,0x20,0x5f,0x31,0x33,0x33,
    0x20,0x2b,0x20,0x63,0x61,0x6c,0x63,0x5f,0x73,0x70,0x6f,0x74,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x39,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x31,0x33,0x34,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x5f,0x31,0x33,0x34,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 vs_paramsl[4];
    layout(location = 0) in vec3 pos;
    
    void main()
    {
        gl_Position = mat4(vs_paramsl[0], vs_paramsl[1], vs_paramsl[2], vs_paramsl[3]) * vec4(pos, 1.0);
    }
    
*/
static const char light_cube_vs_source_glsl330[196] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x6c,0x5b,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x30,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x31,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x32,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x6c,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,
    0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    layout(location = 0) out vec4 frag;
    
    void main()
    {
        frag = vec4(1.0);
    }
    
*/
static const char light_cube_fs_source_glsl330[91] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before genshader.h"
#endif
static inline const sg_shader_desc* comboshader_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "normal";
      desc.attrs[2].name = "texcoord";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[1].size = 336;
      desc.fs.uniform_blocks[1].uniforms[0].name = "fs_point_lights";
      desc.fs.uniform_blocks[1].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[1].uniforms[0].array_count = 21;
      desc.fs.uniform_blocks[2].size = 64;
      desc.fs.uniform_blocks[2].uniforms[0].name = "fs_dir_light";
      desc.fs.uniform_blocks[2].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[2].uniforms[0].array_count = 4;
      desc.fs.uniform_blocks[3].size = 112;
      desc.fs.uniform_blocks[3].uniforms[0].name = "fs_spot_light";
      desc.fs.uniform_blocks[3].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[3].uniforms[0].array_count = 7;
      desc.fs.images[0].name = "imgdiff";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "imgspec";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "comboshader_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* light_cube_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.vs.source = light_cube_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_paramsl";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.source = light_cube_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.label = "light_cube_shader";
    }
    return &desc;
  }
  return 0;
}
